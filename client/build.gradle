/*
* The 'javafx-gradle-plugin' can generate executable JARs, exe, deb, RPM and DMG files.
* Shadow generates a fat JAR.
* Proguard is an optimizer.
*/
buildscript {
	dependencies {
		classpath 'de.dynamicfiles.projects.gradle.plugins:javafx-gradle-plugin:8.8.2'
		classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
	}
	repositories {
		jcenter()
	}
}

apply plugin: 'application'

mainClassName = "com.msc.serverbrowser.Client"

dependencies {
		compile 'com.github.sarxos:windows-registry-util:0.3'
		compile 'org.xerial:sqlite-jdbc:3.19.3'
		
		compile project(':shared')
}

apply plugin: 'com.github.johnrengelman.shadow'
shadowJar {
	//Merges all service file under "META-INF/services" to one
	mergeServiceFiles()
	
	//this restricts which JARs are bundled. only include the necessary bits
	configurations = [project.configurations.compile]
	
	/*
	* WARNING! Changes to excludes/includes only seem to take effect after a "clean" with gradle.
	* I am not sure where the bug lies, but this should not happen with gradle...
	*/
	//Excluding binary stuff for unsupported platforms
	
	exclude 'org/sqlite/native/Linux/android-arm/**'
	exclude 'org/sqlite/native/Linux/arm/**'
	exclude 'org/sqlite/native/Linux/armv6/**'
	exclude 'org/sqlite/native/Linux/armv7/**'
	exclude 'org/sqlite/native/Linux/ppc64/**'
	exclude 'org/sqlite/native/FreeBSD/**'
	exclude 'org/sqlite/native/Mac/**'
	//Theoretically, in a distant future, one could kill 32bit support...
	//exclude 'org/sqlite/native/Windows/x86/**'

	//maven adds junk into the "META-INF/maven" folder which is useful for libraries, but not for apps,
	//since these are typically not consumed by other projects.
	exclude 'META-INF/maven/**'
}

apply plugin: 'javafx-gradle-plugin'
jfx {
    mainClass = mainClassName
    vendor = projectVendor
    
    //precompiles the CSS to binary. Useful performance gain, if the CSS files are not modified during runtime
    css2bin = true
}
