com.github.sarxos.winreg.HKey -> a:
    com.github.sarxos.winreg.HKey HKCR -> a
    com.github.sarxos.winreg.HKey HKCU -> b
    com.github.sarxos.winreg.HKey HKLM -> c
    com.github.sarxos.winreg.HKey HKU -> d
    com.github.sarxos.winreg.HKey HKCC -> e
    int hex -> a
    java.util.prefs.Preferences root -> a
    com.github.sarxos.winreg.HKey[] $VALUES -> a
    47:54:void <init>(java.lang.String,int,int,java.util.prefs.Preferences) -> <init>
    65:71:com.github.sarxos.winreg.HKey fromHex(int) -> a
    1020:1020:com.github.sarxos.winreg.HKey[] values():20:20 -> a
    1020:1020:com.github.sarxos.winreg.HKey fromHex(int):65 -> a
    1057:1057:int hex():57:57 -> a
    1057:1057:com.github.sarxos.winreg.HKey fromHex(int):67 -> a
    20:45:void <clinit>() -> <clinit>
com.github.sarxos.winreg.RegistryException -> b:
    7:8:void <init>() -> <init>
    11:12:void <init>(java.lang.String,java.lang.Throwable) -> <init>
com.github.sarxos.winreg.WindowsRegistry -> c:
    com.github.sarxos.winreg.WindowsRegistry instance -> a
    26:27:void <init>() -> <init>
    33:33:com.github.sarxos.winreg.WindowsRegistry getInstance() -> a
    61:63:java.lang.String readString$239ce54b(com.github.sarxos.winreg.HKey,java.lang.String,java.lang.String) -> a
    1061:1061:java.util.prefs.Preferences com.github.sarxos.winreg.HKey.root():61:61 -> a
    1061:1061:java.lang.String readString$239ce54b(com.github.sarxos.winreg.HKey,java.lang.String,java.lang.String):61 -> a
    2057:2057:int com.github.sarxos.winreg.HKey.hex():57:57 -> a
    2057:2057:java.lang.String readString$239ce54b(com.github.sarxos.winreg.HKey,java.lang.String,java.lang.String):61 -> a
    21:21:void <clinit>() -> <clinit>
com.github.sarxos.winreg.internal.ReflectedMethods -> d:
    java.lang.Class IC -> a
    java.lang.Class BAC -> b
    java.lang.reflect.Method OPEN_KEY -> a
    java.lang.reflect.Method CLOSE_KEY -> b
    java.lang.reflect.Method QUERY_VALUE_EX -> c
    java.lang.String NATIVE_ENCODING -> a
    45:52:java.lang.reflect.Method setupMethod(java.lang.String,java.lang.Class[]) -> a
    1061:1061:java.util.prefs.Preferences com.github.sarxos.winreg.HKey.root():61:61 -> a
    1061:1061:java.lang.reflect.Method setupMethod(java.lang.String,java.lang.Class[]):47 -> a
    67:70:java.lang.String readString$5c67fdb2(java.util.prefs.Preferences,int,java.lang.String,java.lang.String) -> a
    1145:1149:int[] keyOpen(java.util.prefs.Preferences,int,java.lang.String,int):145:149 -> a
    1145:1149:java.lang.String readString$5c67fdb2(java.util.prefs.Preferences,int,java.lang.String,java.lang.String):67 -> a
    1153:1154:void keyClose(java.util.prefs.Preferences,int[]):153:154 -> a
    1153:1154:java.lang.String readString$5c67fdb2(java.util.prefs.Preferences,int,java.lang.String,java.lang.String):69 -> a
    132:141:java.lang.Object invoke(java.lang.reflect.Method,java.util.prefs.Preferences,java.lang.Object[]) -> a
    157:166:byte[] strToNativeBytes(java.lang.String) -> a
    170:182:java.lang.String strFromNativeBytes$2427f066(byte[]) -> a
    185:186:void <init>() -> <init>
    26:42:void <clinit>() -> <clinit>
com.github.sarxos.winreg.internal.WindowsPreferencesBuilder -> e:
    java.util.logging.Logger LOG -> a
    byte[] WINDOWS_ROOT_PATH -> a
    java.util.prefs.Preferences hkcr -> b
    java.util.prefs.Preferences hku -> c
    java.util.prefs.Preferences hkcc -> d
    15:15:void <init>() -> <init>
    46:46:java.util.prefs.Preferences getHKCR() -> a
    58:58:java.util.prefs.Preferences getHKU() -> b
    62:62:java.util.prefs.Preferences getHKCC() -> c
    17:43:void <clinit>() -> <clinit>
    1069:1074:byte[] stringToByteArray(java.lang.String):69:74 -> <clinit>
    1069:1074:void <clinit>():19 -> <clinit>
com.msc.sampbrowser.entities.OneLineStringProperty -> f:
    18:19:void <init>() -> <init>
    29:31:void setValue(java.lang.String) -> setValue
    36:38:void set(java.lang.String) -> set
    42:43:java.lang.String replaceLineBreaks(java.lang.String) -> a
    14:14:void setValue(java.lang.Object) -> setValue
    14:14:void set(java.lang.Object) -> set
com.msc.sampbrowser.entities.SampServer -> g:
    javafx.beans.property.StringProperty hostnameProperty -> a
    javafx.beans.property.StringProperty addressProperty -> b
    javafx.beans.property.StringProperty actualPlayersProperty -> c
    javafx.beans.property.StringProperty modeProperty -> d
    javafx.beans.property.StringProperty languageProperty -> e
    javafx.beans.property.StringProperty lagcompProperty -> f
    javafx.beans.property.StringProperty websiteProperty -> g
    javafx.beans.property.StringProperty versionProperty -> h
    javafx.beans.property.IntegerProperty portProperty -> a
    javafx.beans.property.IntegerProperty playersProperty -> b
    javafx.beans.property.IntegerProperty maxPlayersProperty -> c
    11:28:void <init>(java.lang.String,java.lang.Integer) -> <init>
    87:88:void updatePlayersAndMaxPlayers() -> a
    112:112:java.lang.String getAddress() -> getAddress
    137:137:java.lang.Integer getPort() -> a
    210:216:boolean equals(java.lang.Object) -> equals
    222:222:int hashCode() -> hashCode
com.msc.sampbrowser.entities.SampServerBuilder -> h:
    com.msc.sampbrowser.entities.SampServer server -> a
    8:10:void <init>(java.lang.String,java.lang.Integer) -> <init>
    14:15:com.msc.sampbrowser.entities.SampServerBuilder setHostname(java.lang.String) -> a
    1162:1163:void com.msc.sampbrowser.entities.SampServer.setHostname(java.lang.String):162:163 -> a
    1162:1163:com.msc.sampbrowser.entities.SampServerBuilder setHostname(java.lang.String):14 -> a
    20:21:com.msc.sampbrowser.entities.SampServerBuilder setLagcomp(java.lang.String) -> b
    1172:1173:void com.msc.sampbrowser.entities.SampServer.setLagcomp(java.lang.String):172:173 -> b
    1172:1173:com.msc.sampbrowser.entities.SampServerBuilder setLagcomp(java.lang.String):20 -> b
    26:27:com.msc.sampbrowser.entities.SampServerBuilder setLanguage(java.lang.String) -> c
    1177:1178:void com.msc.sampbrowser.entities.SampServer.setLanguage(java.lang.String):177:178 -> c
    1177:1178:com.msc.sampbrowser.entities.SampServerBuilder setLanguage(java.lang.String):26 -> c
    32:34:com.msc.sampbrowser.entities.SampServerBuilder setMaxPlayers(java.lang.Integer) -> a
    1182:1184:void com.msc.sampbrowser.entities.SampServer.setMaxPlayers(java.lang.Integer):182:184 -> a
    1182:1184:com.msc.sampbrowser.entities.SampServerBuilder setMaxPlayers(java.lang.Integer):32 -> a
    39:40:com.msc.sampbrowser.entities.SampServerBuilder setMode(java.lang.String) -> d
    1188:1189:void com.msc.sampbrowser.entities.SampServer.setMode(java.lang.String):188:189 -> d
    1188:1189:com.msc.sampbrowser.entities.SampServerBuilder setMode(java.lang.String):39 -> d
    45:47:com.msc.sampbrowser.entities.SampServerBuilder setPlayers(java.lang.Integer) -> b
    1193:1195:void com.msc.sampbrowser.entities.SampServer.setPlayers(java.lang.Integer):193:195 -> b
    1193:1195:com.msc.sampbrowser.entities.SampServerBuilder setPlayers(java.lang.Integer):45 -> b
    52:53:com.msc.sampbrowser.entities.SampServerBuilder setVersion(java.lang.String) -> e
    1199:1200:void com.msc.sampbrowser.entities.SampServer.setVersion(java.lang.String):199:200 -> e
    1199:1200:com.msc.sampbrowser.entities.SampServerBuilder setVersion(java.lang.String):52 -> e
    58:59:com.msc.sampbrowser.entities.SampServerBuilder setWebsite(java.lang.String) -> f
    1204:1205:void com.msc.sampbrowser.entities.SampServer.setWebsite(java.lang.String):204:205 -> f
    1204:1205:com.msc.sampbrowser.entities.SampServerBuilder setWebsite(java.lang.String):58 -> f
    2023:2041:java.lang.String com.msc.sampbrowser.util.Hashing.verifyChecksum(java.lang.String):23:41 -> b
    2082:2093:void com.msc.serverbrowser.data.Favourites.addServerToFavourites(com.msc.sampbrowser.entities.SampServer):82:93 -> a
    2104:2104:boolean com.msc.serverbrowser.data.Favourites.isFavourite(com.msc.sampbrowser.entities.SampServer):104:104 -> a
    2104:2104:void com.msc.serverbrowser.data.Favourites.addServerToFavourites(com.msc.sampbrowser.entities.SampServer):82 -> a
    2151:2177:java.util.List com.msc.serverbrowser.data.Favourites.getFavourites():151:177 -> a
    2151:2177:boolean com.msc.serverbrowser.data.Favourites.isFavourite(com.msc.sampbrowser.entities.SampServer):104 -> a
    2151:2177:void com.msc.serverbrowser.data.Favourites.addServerToFavourites(com.msc.sampbrowser.entities.SampServer):82 -> a
    3107:3107:java.lang.String com.msc.sampbrowser.entities.SampServer.getHostname():107:107 -> a
    3107:3107:void com.msc.serverbrowser.data.Favourites.addServerToFavourites(com.msc.sampbrowser.entities.SampServer):85 -> a
    3117:3117:java.lang.String com.msc.sampbrowser.entities.SampServer.getLagcomp():117:117 -> a
    3117:3117:void com.msc.serverbrowser.data.Favourites.addServerToFavourites(com.msc.sampbrowser.entities.SampServer):85 -> a
    3122:3122:java.lang.String com.msc.sampbrowser.entities.SampServer.getLanguage():122:122 -> a
    3122:3122:void com.msc.serverbrowser.data.Favourites.addServerToFavourites(com.msc.sampbrowser.entities.SampServer):85 -> a
    3142:3142:java.lang.Integer com.msc.sampbrowser.entities.SampServer.getPlayers():142:142 -> a
    3142:3142:void com.msc.serverbrowser.data.Favourites.addServerToFavourites(com.msc.sampbrowser.entities.SampServer):85 -> a
    4127:4127:java.lang.Integer com.msc.sampbrowser.entities.SampServer.getMaxPlayers():127:127 -> a
    4127:4127:void com.msc.serverbrowser.data.Favourites.addServerToFavourites(com.msc.sampbrowser.entities.SampServer):86 -> a
    4132:4132:java.lang.String com.msc.sampbrowser.entities.SampServer.getMode():132:132 -> a
    4132:4132:void com.msc.serverbrowser.data.Favourites.addServerToFavourites(com.msc.sampbrowser.entities.SampServer):86 -> a
    4147:4147:java.lang.String com.msc.sampbrowser.entities.SampServer.getVersion():147:147 -> a
    4147:4147:void com.msc.serverbrowser.data.Favourites.addServerToFavourites(com.msc.sampbrowser.entities.SampServer):86 -> a
    4152:4152:java.lang.String com.msc.sampbrowser.entities.SampServer.getWebsite():152:152 -> a
    4152:4152:void com.msc.serverbrowser.data.Favourites.addServerToFavourites(com.msc.sampbrowser.entities.SampServer):86 -> a
    5123:5128:java.lang.String com.msc.serverbrowser.data.Favourites.escapeFormat(java.lang.String,java.lang.String[]):123:128 -> a
    5187:5240:java.util.List com.msc.serverbrowser.data.Favourites.getFavouritesFromXML():187:240 -> a
    6064:6064:com.msc.sampbrowser.entities.SampServer build():64:64 -> a
    6064:6064:java.util.List com.msc.serverbrowser.data.Favourites.getFavouritesFromXML():226 -> a
    6157:6175:void com.msc.serverbrowser.data.Favourites.lambda$getFavourites$2(java.util.List,java.sql.ResultSet):157:175 -> a
    7064:7064:com.msc.sampbrowser.entities.SampServer build():64:64 -> a
    7064:7064:void com.msc.serverbrowser.data.Favourites.lambda$getFavourites$2(java.util.List,java.sql.ResultSet):168 -> a
    8026:8032:void com.msc.serverbrowser.data.PastUsernames.addPastUsername(java.lang.String):26:32 -> a
    8043:8060:java.util.List com.msc.serverbrowser.data.PastUsernames.getPastUsernames():43:60 -> a
    8043:8060:void com.msc.serverbrowser.data.PastUsernames.addPastUsername(java.lang.String):26 -> a
    8065:8099:java.util.Set com.msc.serverbrowser.data.PastUsernames.getPastUsernamesFromXML():65:99 -> a
    9049:9058:void com.msc.serverbrowser.data.PastUsernames.lambda$getPastUsernames$0(java.util.List,java.sql.ResultSet):49:58 -> b
    10024:10044:java.lang.String com.msc.serverbrowser.data.properties.ClientProperties.getPropertyAsString(com.msc.serverbrowser.data.properties.Property):24:44 -> a
    11041:11041:java.lang.String com.msc.serverbrowser.data.properties.Property.defaultValue():41:41 -> a
    11041:11041:java.lang.String com.msc.serverbrowser.data.properties.ClientProperties.getPropertyAsString(com.msc.serverbrowser.data.properties.Property):24 -> a
    12036:12036:int com.msc.serverbrowser.data.properties.Property.id():36:36 -> a
    12036:12036:java.lang.String com.msc.serverbrowser.data.properties.ClientProperties.getPropertyAsString(com.msc.serverbrowser.data.properties.Property):27 -> a
    12041:12041:java.lang.String com.msc.serverbrowser.data.properties.Property.defaultValue():41:41 -> a
    12041:12041:java.lang.String com.msc.serverbrowser.data.properties.ClientProperties.getPropertyAsString(com.msc.serverbrowser.data.properties.Property):44 -> a
    12090:12092:java.lang.Boolean com.msc.serverbrowser.data.properties.ClientProperties.getPropertyAsBoolean(com.msc.serverbrowser.data.properties.Property):90:92 -> a
    12097:12101:void com.msc.serverbrowser.data.properties.ClientProperties.checkDataType(com.msc.serverbrowser.data.properties.Property,java.lang.Class):97:101 -> a
    13031:13031:java.lang.Class com.msc.serverbrowser.data.properties.Property.datatype():31:31 -> a
    13031:13031:void com.msc.serverbrowser.data.properties.ClientProperties.checkDataType(com.msc.serverbrowser.data.properties.Property,java.lang.Class):97 -> a
    14031:14031:java.lang.Class com.msc.serverbrowser.data.properties.Property.datatype():31:31 -> a
    14031:14031:void com.msc.serverbrowser.data.properties.ClientProperties.checkDataType(com.msc.serverbrowser.data.properties.Property,java.lang.Class):99 -> a
    14105:14121:void com.msc.serverbrowser.data.properties.ClientProperties.setProperty(com.msc.serverbrowser.data.properties.Property,java.lang.Object):105:121 -> a
    15036:15036:int com.msc.serverbrowser.data.properties.Property.id():36:36 -> a
    15036:15036:void com.msc.serverbrowser.data.properties.ClientProperties.setProperty(com.msc.serverbrowser.data.properties.Property,java.lang.Object):113 -> a
    16036:16036:int com.msc.serverbrowser.data.properties.Property.id():36:36 -> a
    16036:16036:void com.msc.serverbrowser.data.properties.ClientProperties.setProperty(com.msc.serverbrowser.data.properties.Property,java.lang.Object):118 -> a
    16137:16139:void com.msc.serverbrowser.data.properties.ClientProperties.setProperty(com.msc.serverbrowser.data.properties.Property,java.lang.Boolean):137:139 -> a
    16148:16152:void com.msc.serverbrowser.data.properties.ClientProperties.nullCheck(java.lang.Object):148:152 -> nullCheck
    17013:17013:void com.msc.serverbrowser.gui.controllers.implementations.SettingsController.<init>():13:13 -> <init>
    17027:17032:java.io.File com.msc.serverbrowser.util.FileUtility.downloadFile(java.lang.String,java.lang.String):27:32 -> a
    17040:17048:org.sqlite.ExtendedCommand$SQLExtension org.sqlite.ExtendedCommand.parse(java.lang.String):40:48 -> a
    17057:17063:java.lang.String org.sqlite.ExtendedCommand.removeQuotation(java.lang.String):57:63 -> c
    18007:18017:java.lang.String org.sqlite.util.StringUtils.join(java.util.List,java.lang.String):7:17 -> a
com.msc.sampbrowser.interfaces.DataServiceInterface -> com.msc.sampbrowser.interfaces.DataServiceInterface:
    byte[] getAllServers() -> getAllServers
    void tellServerThatYouUseTheApp(java.lang.String) -> tellServerThatYouUseTheApp
com.msc.sampbrowser.interfaces.UpdateServiceInterface -> com.msc.sampbrowser.interfaces.UpdateServiceInterface:
    java.lang.String getLatestVersionURL() -> getLatestVersionURL
    java.lang.String getLatestVersionChecksum() -> getLatestVersionChecksum
com.msc.serverbrowser.Client -> com.msc.serverbrowser.Client:
    java.lang.String serverToConnectTo -> b
    javafx.scene.image.Image APPLICATION_ICON -> a
    java.rmi.registry.Registry registry -> a
    com.msc.sampbrowser.interfaces.DataServiceInterface remoteDataService -> a
    com.msc.sampbrowser.interfaces.UpdateServiceInterface remoteUpdateService -> a
    javafx.stage.Stage stage -> stage
    43:43:void <init>() -> <init>
    74:80:void start(javafx.stage.Stage) -> start
    1087:1106:void establishConnection():87:106 -> start
    1087:1106:void start(javafx.stage.Stage):75 -> start
    1197:1226:void initClient():197:226 -> start
    1197:1226:void start(javafx.stage.Stage):76 -> start
    2124:2172:void loadUI(javafx.stage.Stage):124:172 -> start
    2124:2172:void start(javafx.stage.Stage):77 -> start
    188:189:void setAlertIcon(javafx.scene.control.Alert) -> a
    299:299:java.io.File getOwnJarFile() -> a
    335:348:void main(java.lang.String[]) -> main
    245:258:void lambda$checkVersion$4() -> b
    253:257:void lambda$null$3(javafx.scene.control.ButtonType) -> a
    2283:2292:void updateLauncher():283:292 -> a
    2283:2292:void lambda$null$3(javafx.scene.control.ButtonType):255 -> a
    2307:2331:void selfRestart():307:331 -> a
    2307:2331:void updateLauncher():286 -> a
    2307:2331:void lambda$null$3(javafx.scene.control.ButtonType):255 -> a
    143:146:void lambda$loadUI$2(com.msc.serverbrowser.gui.controllers.implementations.MainController,javafx.stage.Stage,javafx.stage.WindowEvent) -> a
    3144:3145:void com.msc.serverbrowser.gui.controllers.implementations.MainController.onClose():144:145 -> a
    3144:3145:void lambda$loadUI$2(com.msc.serverbrowser.gui.controllers.implementations.MainController,javafx.stage.Stage,javafx.stage.WindowEvent):143 -> a
    4053:4053:int com.msc.serverbrowser.gui.Views.getId():53:53 -> a
    4053:4053:void com.msc.serverbrowser.gui.controllers.implementations.MainController.onClose():144 -> a
    4053:4053:void lambda$loadUI$2(com.msc.serverbrowser.gui.controllers.implementations.MainController,javafx.stage.Stage,javafx.stage.WindowEvent):143 -> a
    4131:4133:void com.msc.serverbrowser.data.properties.ClientProperties.setProperty(com.msc.serverbrowser.data.properties.Property,java.lang.Integer):131:133 -> a
    4131:4133:void com.msc.serverbrowser.gui.controllers.implementations.MainController.onClose():144 -> a
    4131:4133:void lambda$loadUI$2(com.msc.serverbrowser.gui.controllers.implementations.MainController,javafx.stage.Stage,javafx.stage.WindowEvent):143 -> a
    103:103:void lambda$establishConnection$1() -> c
    4176:4184:void displayNoConnectionDialog():176:184 -> c
    4176:4184:void lambda$establishConnection$1():103 -> c
    79:79:void lambda$start$0() -> d
    4234:4274:void checkVersion():234:274 -> d
    4234:4274:void lambda$start$0():79 -> d
    49:54:void <clinit>() -> <clinit>
com.msc.serverbrowser.data.SQLDatabase -> i:
    java.lang.String DB_LOCATION -> c
    java.sql.Connection sqlConnection -> a
    com.msc.serverbrowser.data.SQLDatabase instance -> a
    15:15:void <init>() -> <init>
    25:29:com.msc.serverbrowser.data.SQLDatabase getInstance() -> a
    68:73:boolean execute(java.lang.String) -> execute
    81:86:java.util.Optional executeGetResult(java.lang.String) -> a
    17:35:void <clinit>() -> <clinit>
    1041:1062:void init():41:62 -> <clinit>
    1041:1062:void <clinit>():34 -> <clinit>
com.msc.serverbrowser.data.properties.Property -> j:
    com.msc.serverbrowser.data.properties.Property LAST_VIEW -> a
    com.msc.serverbrowser.data.properties.Property MAXIMIZED -> b
    com.msc.serverbrowser.data.properties.Property FULLSCREEN -> c
    com.msc.serverbrowser.data.properties.Property SHOW_CHANGELOG -> d
    com.msc.serverbrowser.data.properties.Property NOTIFY_SERVER_ON_STARTUP -> e
    com.msc.serverbrowser.data.properties.Property REMEMBER_LAST_VIEW -> f
    com.msc.serverbrowser.data.properties.Property ASK_FOR_NAME_ON_CONNECT -> g
    com.msc.serverbrowser.data.properties.Property SAMP_PATH -> h
    int id -> id
    java.lang.String defaultValue -> defaultValue
    java.lang.Class datatype -> datatype
    23:27:void <init>(java.lang.String,int,int,java.lang.Object,java.lang.Class) -> <init>
    5:14:void <clinit>() -> <clinit>
com.msc.serverbrowser.data.rmi.CustomRMIClientSocketFactory -> k:
    8:8:void <init>() -> <init>
    13:17:java.net.Socket createSocket(java.lang.String,int) -> createSocket
com.msc.serverbrowser.gui.Views -> l:
    com.msc.serverbrowser.gui.Views SERVERS_FAV -> a
    com.msc.serverbrowser.gui.Views SERVERS_ALL -> b
    com.msc.serverbrowser.gui.Views USERNAME_CHANGER -> c
    com.msc.serverbrowser.gui.Views VERSION_CHANGER -> d
    com.msc.serverbrowser.gui.Views SETTINGS -> e
    int id -> id
    java.util.Map idMapping -> a
    com.msc.serverbrowser.gui.Views[] $VALUES -> a
    43:49:void <init>(java.lang.String,int,int) -> <init>
    13:39:void <clinit>() -> <clinit>
    1013:1013:com.msc.serverbrowser.gui.Views[] values():13:13 -> <clinit>
    1013:1013:void <clinit>():35 -> <clinit>
    1053:1053:int getId():53:53 -> <clinit>
    1053:1053:void <clinit>():37 -> <clinit>
com.msc.serverbrowser.gui.controllers.implementations.MainController -> m:
    17:17:void <init>() -> <init>
com.msc.serverbrowser.logging.Logging -> n:
    java.util.logging.Logger logger -> logger
    12:30:void <clinit>() -> <clinit>
com.msc.serverbrowser.util.GTA -> o:
    47:50:java.lang.String retrieveUsernameFromRegistry() -> a
    1046:1046:java.lang.String com.github.sarxos.winreg.WindowsRegistry.readString(com.github.sarxos.winreg.HKey,java.lang.String,java.lang.String):46:46 -> a
    1046:1046:java.lang.String retrieveUsernameFromRegistry():47 -> a
    71:75:java.lang.String getGtaPathUnsafe() -> b
    2046:2046:java.lang.String com.github.sarxos.winreg.WindowsRegistry.readString(com.github.sarxos.winreg.HKey,java.lang.String,java.lang.String):46:46 -> b
    2046:2046:java.lang.String getGtaPathUnsafe():71 -> b
    27:27:void <clinit>() -> <clinit>
org.sqlite.ExtendedCommand$BackupCommand -> p:
    java.lang.String srcDB -> d
    java.lang.String destFile -> e
    java.util.regex.Pattern backupCmd -> a
    76:79:void <init>(java.lang.String,java.lang.String) -> <init>
    91:102:org.sqlite.ExtendedCommand$BackupCommand parse(java.lang.String) -> a
    106:107:void execute(org.sqlite.core.DB) -> a
    81:82:void <clinit>() -> <clinit>
org.sqlite.ExtendedCommand$RestoreCommand -> q:
    java.lang.String targetDB -> f
    java.lang.String srcFile -> g
    java.util.regex.Pattern restoreCmd -> b
    123:126:void <init>(java.lang.String,java.lang.String) -> <init>
    135:145:org.sqlite.ExtendedCommand$RestoreCommand parse(java.lang.String) -> a
    152:153:void execute(org.sqlite.core.DB) -> a
    115:116:void <clinit>() -> <clinit>
org.sqlite.ExtendedCommand$SQLExtension -> r:
    void execute(org.sqlite.core.DB) -> a
    java.lang.String getValue() -> getValue
    int estimateLength() -> a
    void appendTo(java.lang.StringBuffer,java.util.Calendar) -> a
    void appendTo(java.lang.StringBuffer,int) -> a
org.sqlite.JDBC -> org.sqlite.JDBC:
    23:23:void <init>() -> <init>
    40:40:int getMajorVersion() -> getMajorVersion
    47:47:int getMinorVersion() -> getMinorVersion
    54:54:boolean jdbcCompliant() -> jdbcCompliant
    58:58:java.util.logging.Logger getParentLogger() -> getParentLogger
    65:65:boolean acceptsURL(java.lang.String) -> acceptsURL
    74:74:boolean isValidURL(java.lang.String) -> a
    81:81:java.sql.DriverPropertyInfo[] getPropertyInfo(java.lang.String,java.util.Properties) -> getPropertyInfo
    88:88:java.sql.Connection connect(java.lang.String,java.util.Properties) -> connect
    1110:1114:java.sql.Connection createConnection(java.lang.String,java.util.Properties):110:114 -> connect
    1110:1114:java.sql.Connection connect(java.lang.String,java.util.Properties):88 -> connect
    2098:2098:java.lang.String extractAddress(java.lang.String):98:98 -> connect
    2098:2098:java.sql.Connection createConnection(java.lang.String,java.util.Properties):114 -> connect
    2098:2098:java.sql.Connection connect(java.lang.String,java.util.Properties):88 -> connect
    29:34:void <clinit>() -> <clinit>
org.sqlite.SQLiteConfig -> s:
    java.util.Properties pragmaTable -> a
    int openModeFlag -> b
    org.sqlite.SQLiteConfig$TransactionMode transactionMode -> a
    int busyTimeout -> c
    org.sqlite.SQLiteConfig$DateClass dateClass -> a
    org.sqlite.SQLiteConfig$DatePrecision datePrecision -> a
    long dateMultiplier -> a
    java.lang.String dateStringFormat -> h
    java.lang.String[] OnOff -> a
    61:62:void <init>() -> <init>
    46:93:void <init>(java.util.Properties) -> <init>
    111:143:void apply(java.sql.Connection) -> a
    170:170:boolean getBoolean(org.sqlite.SQLiteConfig$Pragma,java.lang.String) -> a
    224:235:java.sql.DriverPropertyInfo[] getDriverPropertyInfo() -> a
    310:311:void setOpenMode(org.sqlite.SQLiteOpenMode) -> a
    43:43:java.lang.String[] access$000() -> access$000
    43:43:java.lang.String[] access$100$734a3d99(org.sqlite.ExtendedCommand$SQLExtension[]) -> a
    1425:1429:java.lang.String[] toStringArray$734a3d99(org.sqlite.ExtendedCommand$SQLExtension[]):425:429 -> a
    1425:1429:java.lang.String[] access$100$734a3d99(org.sqlite.ExtendedCommand$SQLExtension[]):43 -> a
    238:238:void <clinit>() -> <clinit>
org.sqlite.SQLiteConfig$DateClass -> t:
    org.sqlite.SQLiteConfig$DateClass INTEGER -> b
    org.sqlite.SQLiteConfig$DateClass TEXT -> c
    org.sqlite.SQLiteConfig$DateClass REAL -> d
    org.sqlite.SQLiteConfig$DateClass[] $VALUES -> a
    769:769:org.sqlite.SQLiteConfig$DateClass[] values() -> values
    769:769:void <init>(java.lang.String,int) -> <init>
    773:773:java.lang.String getValue() -> getValue
    777:777:org.sqlite.SQLiteConfig$DateClass getDateClass(java.lang.String) -> a
    1769:1769:org.sqlite.SQLiteConfig$DateClass valueOf(java.lang.String):769:769 -> a
    1769:1769:org.sqlite.SQLiteConfig$DateClass getDateClass(java.lang.String):777 -> a
    769:770:void <clinit>() -> <clinit>
org.sqlite.SQLiteConfig$DatePrecision -> u:
    org.sqlite.SQLiteConfig$DatePrecision SECONDS -> b
    org.sqlite.SQLiteConfig$DatePrecision MILLISECONDS -> c
    org.sqlite.SQLiteConfig$DatePrecision[] $VALUES -> a
    749:749:org.sqlite.SQLiteConfig$DatePrecision[] values() -> values
    749:749:void <init>(java.lang.String,int) -> <init>
    753:753:java.lang.String getValue() -> getValue
    757:757:org.sqlite.SQLiteConfig$DatePrecision getPrecision(java.lang.String) -> a
    1749:1749:org.sqlite.SQLiteConfig$DatePrecision valueOf(java.lang.String):749:749 -> a
    1749:1749:org.sqlite.SQLiteConfig$DatePrecision getPrecision(java.lang.String):757 -> a
    749:750:void <clinit>() -> <clinit>
org.sqlite.SQLiteConfig$Encoding -> v:
    org.sqlite.SQLiteConfig$Encoding UTF8 -> a
    org.sqlite.SQLiteConfig$Encoding UTF16 -> b
    org.sqlite.SQLiteConfig$Encoding UTF16_LITTLE_ENDIAN -> c
    org.sqlite.SQLiteConfig$Encoding UTF16_BIG_ENDIAN -> d
    org.sqlite.SQLiteConfig$Encoding UTF_8 -> e
    org.sqlite.SQLiteConfig$Encoding UTF_16 -> f
    org.sqlite.SQLiteConfig$Encoding UTF_16LE -> g
    org.sqlite.SQLiteConfig$Encoding UTF_16BE -> h
    java.lang.String typeName -> typeName
    org.sqlite.SQLiteConfig$Encoding[] $VALUES -> a
    432:432:org.sqlite.SQLiteConfig$Encoding[] values() -> values
    444:446:void <init>(java.lang.String,int,java.lang.String) -> <init>
    448:450:void <init>(java.lang.String,int,org.sqlite.SQLiteConfig$Encoding) -> <init>
    1453:1453:java.lang.String getValue():453:453 -> <init>
    1453:1453:void <init>(java.lang.String,int,org.sqlite.SQLiteConfig$Encoding):449 -> <init>
    453:453:java.lang.String getValue() -> getValue
    432:440:void <clinit>() -> <clinit>
org.sqlite.SQLiteConfig$JournalMode -> w:
    org.sqlite.SQLiteConfig$JournalMode DELETE -> a
    org.sqlite.SQLiteConfig$JournalMode TRUNCATE -> b
    org.sqlite.SQLiteConfig$JournalMode PERSIST -> c
    org.sqlite.SQLiteConfig$JournalMode MEMORY -> d
    org.sqlite.SQLiteConfig$JournalMode WAL -> e
    org.sqlite.SQLiteConfig$JournalMode OFF -> f
    org.sqlite.SQLiteConfig$JournalMode[] $VALUES -> a
    461:461:org.sqlite.SQLiteConfig$JournalMode[] values() -> values
    461:461:void <init>(java.lang.String,int) -> <init>
    465:465:java.lang.String getValue() -> getValue
    461:462:void <clinit>() -> <clinit>
org.sqlite.SQLiteConfig$LockingMode -> x:
    org.sqlite.SQLiteConfig$LockingMode NORMAL -> a
    org.sqlite.SQLiteConfig$LockingMode EXCLUSIVE -> b
    org.sqlite.SQLiteConfig$LockingMode[] $VALUES -> a
    562:562:org.sqlite.SQLiteConfig$LockingMode[] values() -> values
    562:562:void <init>(java.lang.String,int) -> <init>
    565:565:java.lang.String getValue() -> getValue
    562:563:void <clinit>() -> <clinit>
org.sqlite.SQLiteConfig$Pragma -> y:
    org.sqlite.SQLiteConfig$Pragma OPEN_MODE -> a
    org.sqlite.SQLiteConfig$Pragma SHARED_CACHE -> b
    org.sqlite.SQLiteConfig$Pragma LOAD_EXTENSION -> c
    org.sqlite.SQLiteConfig$Pragma CACHE_SIZE -> d
    org.sqlite.SQLiteConfig$Pragma CASE_SENSITIVE_LIKE -> e
    org.sqlite.SQLiteConfig$Pragma COUNT_CHANGES -> f
    org.sqlite.SQLiteConfig$Pragma DEFAULT_CACHE_SIZE -> g
    org.sqlite.SQLiteConfig$Pragma EMPTY_RESULT_CALLBACKS -> h
    org.sqlite.SQLiteConfig$Pragma ENCODING -> i
    org.sqlite.SQLiteConfig$Pragma FOREIGN_KEYS -> j
    org.sqlite.SQLiteConfig$Pragma FULL_COLUMN_NAMES -> k
    org.sqlite.SQLiteConfig$Pragma FULL_SYNC -> l
    org.sqlite.SQLiteConfig$Pragma INCREMENTAL_VACUUM -> m
    org.sqlite.SQLiteConfig$Pragma JOURNAL_MODE -> n
    org.sqlite.SQLiteConfig$Pragma JOURNAL_SIZE_LIMIT -> o
    org.sqlite.SQLiteConfig$Pragma LEGACY_FILE_FORMAT -> p
    org.sqlite.SQLiteConfig$Pragma LOCKING_MODE -> q
    org.sqlite.SQLiteConfig$Pragma PAGE_SIZE -> r
    org.sqlite.SQLiteConfig$Pragma MAX_PAGE_COUNT -> s
    org.sqlite.SQLiteConfig$Pragma READ_UNCOMMITED -> t
    org.sqlite.SQLiteConfig$Pragma RECURSIVE_TRIGGERS -> u
    org.sqlite.SQLiteConfig$Pragma REVERSE_UNORDERED_SELECTS -> v
    org.sqlite.SQLiteConfig$Pragma SHORT_COLUMN_NAMES -> w
    org.sqlite.SQLiteConfig$Pragma SYNCHRONOUS -> x
    org.sqlite.SQLiteConfig$Pragma TEMP_STORE -> y
    org.sqlite.SQLiteConfig$Pragma TEMP_STORE_DIRECTORY -> z
    org.sqlite.SQLiteConfig$Pragma USER_VERSION -> A
    org.sqlite.SQLiteConfig$Pragma TRANSACTION_MODE -> B
    org.sqlite.SQLiteConfig$Pragma DATE_PRECISION -> C
    org.sqlite.SQLiteConfig$Pragma DATE_CLASS -> D
    org.sqlite.SQLiteConfig$Pragma DATE_STRING_FORMAT -> E
    org.sqlite.SQLiteConfig$Pragma BUSY_TIMEOUT -> F
    java.lang.String pragmaName -> i
    java.lang.String[] choices -> choices
    java.lang.String description -> description
    org.sqlite.SQLiteConfig$Pragma[] $VALUES -> a
    240:240:org.sqlite.SQLiteConfig$Pragma[] values() -> values
    285:286:void <init>(java.lang.String,int,java.lang.String) -> <init>
    289:290:void <init>(java.lang.String,int,java.lang.String,java.lang.String[]) -> <init>
    292:296:void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String[]) -> <init>
    240:278:void <clinit>() -> <clinit>
org.sqlite.SQLiteConfig$SynchronousMode -> z:
    org.sqlite.SQLiteConfig$SynchronousMode OFF -> a
    org.sqlite.SQLiteConfig$SynchronousMode NORMAL -> b
    org.sqlite.SQLiteConfig$SynchronousMode FULL -> c
    org.sqlite.SQLiteConfig$SynchronousMode[] $VALUES -> a
    642:642:org.sqlite.SQLiteConfig$SynchronousMode[] values() -> values
    642:642:void <init>(java.lang.String,int) -> <init>
    646:646:java.lang.String getValue() -> getValue
    642:643:void <clinit>() -> <clinit>
org.sqlite.SQLiteConfig$TempStore -> A:
    org.sqlite.SQLiteConfig$TempStore DEFAULT -> a
    org.sqlite.SQLiteConfig$TempStore FILE -> b
    org.sqlite.SQLiteConfig$TempStore MEMORY -> c
    org.sqlite.SQLiteConfig$TempStore[] $VALUES -> a
    667:667:org.sqlite.SQLiteConfig$TempStore[] values() -> values
    667:667:void <init>(java.lang.String,int) -> <init>
    671:671:java.lang.String getValue() -> getValue
    667:668:void <clinit>() -> <clinit>
org.sqlite.SQLiteConfig$TransactionMode -> B:
    org.sqlite.SQLiteConfig$TransactionMode DEFFERED -> b
    org.sqlite.SQLiteConfig$TransactionMode IMMEDIATE -> c
    org.sqlite.SQLiteConfig$TransactionMode EXCLUSIVE -> d
    org.sqlite.SQLiteConfig$TransactionMode[] $VALUES -> a
    712:712:org.sqlite.SQLiteConfig$TransactionMode[] values() -> values
    712:712:void <init>(java.lang.String,int) -> <init>
    716:716:java.lang.String getValue() -> getValue
    720:720:org.sqlite.SQLiteConfig$TransactionMode getMode(java.lang.String) -> a
    1712:1712:org.sqlite.SQLiteConfig$TransactionMode valueOf(java.lang.String):712:712 -> a
    1712:1712:org.sqlite.SQLiteConfig$TransactionMode getMode(java.lang.String):720 -> a
    712:713:void <clinit>() -> <clinit>
org.sqlite.SQLiteConnection -> C:
    45:46:void <init>(java.lang.String,java.lang.String,java.util.Properties) -> <init>
    49:49:void setSchema(java.lang.String) -> setSchema
    52:52:java.lang.String getSchema() -> getSchema
    56:56:void abort(java.util.concurrent.Executor) -> abort
    59:59:void setNetworkTimeout(java.util.concurrent.Executor,int) -> setNetworkTimeout
    62:62:int getNetworkTimeout() -> getNetworkTimeout
org.sqlite.SQLiteErrorCode -> D:
    org.sqlite.SQLiteErrorCode UNKNOWN_ERROR -> a
    org.sqlite.SQLiteErrorCode SQLITE_OK -> b
    org.sqlite.SQLiteErrorCode SQLITE_ERROR -> c
    org.sqlite.SQLiteErrorCode SQLITE_INTERNAL -> d
    org.sqlite.SQLiteErrorCode SQLITE_PERM -> e
    org.sqlite.SQLiteErrorCode SQLITE_ABORT -> f
    org.sqlite.SQLiteErrorCode SQLITE_BUSY -> g
    org.sqlite.SQLiteErrorCode SQLITE_LOCKED -> h
    org.sqlite.SQLiteErrorCode SQLITE_NOMEM -> i
    org.sqlite.SQLiteErrorCode SQLITE_READONLY -> j
    org.sqlite.SQLiteErrorCode SQLITE_INTERRUPT -> k
    org.sqlite.SQLiteErrorCode SQLITE_IOERR -> l
    org.sqlite.SQLiteErrorCode SQLITE_CORRUPT -> m
    org.sqlite.SQLiteErrorCode SQLITE_NOTFOUND -> n
    org.sqlite.SQLiteErrorCode SQLITE_FULL -> o
    org.sqlite.SQLiteErrorCode SQLITE_CANTOPEN -> p
    org.sqlite.SQLiteErrorCode SQLITE_PROTOCOL -> q
    org.sqlite.SQLiteErrorCode SQLITE_EMPTY -> r
    org.sqlite.SQLiteErrorCode SQLITE_SCHEMA -> s
    org.sqlite.SQLiteErrorCode SQLITE_TOOBIG -> t
    org.sqlite.SQLiteErrorCode SQLITE_CONSTRAINT -> u
    org.sqlite.SQLiteErrorCode SQLITE_MISMATCH -> v
    org.sqlite.SQLiteErrorCode SQLITE_MISUSE -> w
    org.sqlite.SQLiteErrorCode SQLITE_NOLFS -> x
    org.sqlite.SQLiteErrorCode SQLITE_AUTH -> y
    org.sqlite.SQLiteErrorCode SQLITE_FORMAT -> z
    org.sqlite.SQLiteErrorCode SQLITE_RANGE -> A
    org.sqlite.SQLiteErrorCode SQLITE_NOTADB -> B
    org.sqlite.SQLiteErrorCode SQLITE_ROW -> C
    org.sqlite.SQLiteErrorCode SQLITE_DONE -> D
    org.sqlite.SQLiteErrorCode SQLITE_BUSY_RECOVERY -> E
    org.sqlite.SQLiteErrorCode SQLITE_LOCKED_SHAREDCACHE -> F
    org.sqlite.SQLiteErrorCode SQLITE_READONLY_RECOVERY -> G
    org.sqlite.SQLiteErrorCode SQLITE_IOERR_READ -> H
    org.sqlite.SQLiteErrorCode SQLITE_CORRUPT_VTAB -> I
    org.sqlite.SQLiteErrorCode SQLITE_CONSTRAINT_CHECK -> J
    org.sqlite.SQLiteErrorCode SQLITE_ABORT_ROLLBACK -> K
    org.sqlite.SQLiteErrorCode SQLITE_BUSY_SNAPSHOT -> L
    org.sqlite.SQLiteErrorCode SQLITE_READONLY_CANTLOCK -> M
    org.sqlite.SQLiteErrorCode SQLITE_IOERR_SHORT_READ -> N
    org.sqlite.SQLiteErrorCode SQLITE_CANTOPEN_ISDIR -> O
    org.sqlite.SQLiteErrorCode SQLITE_CONSTRAINT_COMMITHOOK -> P
    org.sqlite.SQLiteErrorCode SQLITE_READONLY_ROLLBACK -> Q
    org.sqlite.SQLiteErrorCode SQLITE_IOERR_WRITE -> R
    org.sqlite.SQLiteErrorCode SQLITE_CANTOPEN_FULLPATH -> S
    org.sqlite.SQLiteErrorCode SQLITE_CONSTRAINT_FOREIGNKEY -> T
    org.sqlite.SQLiteErrorCode SQLITE_READONLY_DBMOVED -> U
    org.sqlite.SQLiteErrorCode SQLITE_IOERR_FSYNC -> V
    org.sqlite.SQLiteErrorCode SQLITE_CANTOPEN_CONVPATH -> W
    org.sqlite.SQLiteErrorCode SQLITE_CONSTRAINT_FUNCTION -> X
    org.sqlite.SQLiteErrorCode SQLITE_IOERR_DIR_FSYNC -> Y
    org.sqlite.SQLiteErrorCode SQLITE_CONSTRAINT_NOTNULL -> Z
    org.sqlite.SQLiteErrorCode SQLITE_IOERR_TRUNCATE -> aa
    org.sqlite.SQLiteErrorCode SQLITE_CONSTRAINT_PRIMARYKEY -> ab
    org.sqlite.SQLiteErrorCode SQLITE_IOERR_FSTAT -> ac
    org.sqlite.SQLiteErrorCode SQLITE_CONSTRAINT_TRIGGER -> ad
    org.sqlite.SQLiteErrorCode SQLITE_IOERR_UNLOCK -> ae
    org.sqlite.SQLiteErrorCode SQLITE_CONSTRAINT_UNIQUE -> af
    org.sqlite.SQLiteErrorCode SQLITE_IOERR_RDLOCK -> ag
    org.sqlite.SQLiteErrorCode SQLITE_CONSTRAINT_VTAB -> ah
    org.sqlite.SQLiteErrorCode SQLITE_IOERR_DELETE -> ai
    org.sqlite.SQLiteErrorCode SQLITE_CONSTRAINT_ROWID -> aj
    org.sqlite.SQLiteErrorCode SQLITE_IOERR_NOMEM -> ak
    org.sqlite.SQLiteErrorCode SQLITE_IOERR_ACCESS -> al
    org.sqlite.SQLiteErrorCode SQLITE_IOERR_CHECKRESERVEDLOCK -> am
    org.sqlite.SQLiteErrorCode SQLITE_IOERR_LOCK -> an
    org.sqlite.SQLiteErrorCode SQLITE_IOERR_CLOSE -> ao
    org.sqlite.SQLiteErrorCode SQLITE_IOERR_SHMOPEN -> ap
    org.sqlite.SQLiteErrorCode SQLITE_IOERR_SHMSIZE -> aq
    org.sqlite.SQLiteErrorCode SQLITE_IOERR_SHMMAP -> ar
    org.sqlite.SQLiteErrorCode SQLITE_IOERR_SEEK -> as
    org.sqlite.SQLiteErrorCode SQLITE_IOERR_DELETE_NOENT -> at
    org.sqlite.SQLiteErrorCode SQLITE_IOERR_MMAP -> au
    org.sqlite.SQLiteErrorCode SQLITE_IOERR_GETTEMPPATH -> av
    org.sqlite.SQLiteErrorCode SQLITE_IOERR_CONVPATH -> aw
    int code -> code
    java.lang.String message -> message
    org.sqlite.SQLiteErrorCode[] $VALUES -> a
    125:128:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    136:141:org.sqlite.SQLiteErrorCode getErrorCode(int) -> a
    1036:1036:org.sqlite.SQLiteErrorCode[] values():36:36 -> a
    1036:1036:org.sqlite.SQLiteErrorCode getErrorCode(int):136 -> a
    150:150:java.lang.String toString() -> toString
    36:114:void <clinit>() -> <clinit>
org.sqlite.SQLiteException -> E:
    34:36:void <init>(java.lang.String,org.sqlite.SQLiteErrorCode) -> <init>
org.sqlite.SQLiteJDBCLoader -> F:
    boolean extracted -> a
    49:49:void <init>() -> <init>
    61:65:boolean initialize() -> initialize
    1077:1099:void cleanup():77:99 -> initialize
    1077:1099:boolean initialize():62 -> initialize
    1293:1345:void loadSQLiteNativeLibrary():293:345 -> initialize
    1293:1345:boolean initialize():64 -> initialize
    69:69:java.io.File getTempDir() -> getTempDir
    161:177:boolean contentsEquals(java.io.InputStream,java.io.InputStream) -> a
    190:255:boolean extractAndLoadLibraryFile(java.lang.String,java.lang.String,java.lang.String) -> a
    268:283:boolean loadNativeLibrary(java.lang.String,java.lang.String) -> a
    349:349:boolean hasResource(java.lang.String) -> b
    363:364:int getMajorVersion() -> getMajorVersion
    371:372:int getMinorVersion() -> getMinorVersion
    380:397:java.lang.String getVersion() -> getVersion
    51:51:void <clinit>() -> <clinit>
org.sqlite.SQLiteJDBCLoader$1 -> G:
    java.lang.String searchPattern -> j
    80:81:void <init>() -> <init>
    83:83:boolean accept(java.io.File,java.lang.String) -> accept
org.sqlite.SQLiteOpenMode -> H:
    org.sqlite.SQLiteOpenMode READONLY -> a
    org.sqlite.SQLiteOpenMode READWRITE -> b
    org.sqlite.SQLiteOpenMode CREATE -> c
    org.sqlite.SQLiteOpenMode DELETEONCLOSE -> d
    org.sqlite.SQLiteOpenMode EXCLUSIVE -> e
    org.sqlite.SQLiteOpenMode OPEN_URI -> f
    org.sqlite.SQLiteOpenMode OPEN_MEMORY -> g
    org.sqlite.SQLiteOpenMode MAIN_DB -> h
    org.sqlite.SQLiteOpenMode TEMP_DB -> i
    org.sqlite.SQLiteOpenMode TRANSIENT_DB -> j
    org.sqlite.SQLiteOpenMode MAIN_JOURNAL -> k
    org.sqlite.SQLiteOpenMode TEMP_JOURNAL -> l
    org.sqlite.SQLiteOpenMode SUBJOURNAL -> m
    org.sqlite.SQLiteOpenMode MASTER_JOURNAL -> n
    org.sqlite.SQLiteOpenMode NOMUTEX -> o
    org.sqlite.SQLiteOpenMode FULLMUTEX -> p
    org.sqlite.SQLiteOpenMode SHAREDCACHE -> q
    org.sqlite.SQLiteOpenMode PRIVATECACHE -> r
    int flag -> flag
    58:60:void <init>(java.lang.String,int,int) -> <init>
    35:53:void <clinit>() -> <clinit>
org.sqlite.core.CoreConnection -> I:
    java.lang.String url -> url
    java.lang.String fileName -> fileName
    org.sqlite.core.DB db -> a
    org.sqlite.core.CoreDatabaseMetaData meta -> a
    boolean autoCommit -> b
    int transactionIsolation -> d
    int busyTimeout -> c
    int openModeFlags -> e
    org.sqlite.SQLiteConfig$TransactionMode transactionMode -> a
    java.util.Map beginCommandMap -> b
    java.util.Set pragmaSet -> a
    org.sqlite.SQLiteConfig$DateClass dateClass -> a
    long dateMultiplier -> a
    org.sqlite.date.FastDateFormat dateFormat -> a
    java.lang.String dateStringFormat -> h
    33:87:void <init>(java.lang.String,java.lang.String,java.util.Properties) -> <init>
    1746:1746:org.sqlite.SQLiteConfig$TransactionMode org.sqlite.SQLiteConfig.getTransactionMode():746:746 -> <init>
    1746:1746:void <init>(java.lang.String,java.lang.String,java.util.Properties):73 -> <init>
    2193:2193:int org.sqlite.SQLiteConfig.getOpenModeFlags():193:193 -> <init>
    2193:2193:void <init>(java.lang.String,java.lang.String,java.util.Properties):74 -> <init>
    3178:3178:boolean org.sqlite.SQLiteConfig.isEnabledSharedCache():178:178 -> <init>
    3178:3178:void <init>(java.lang.String,java.lang.String,java.util.Properties):80 -> <init>
    3186:3186:boolean org.sqlite.SQLiteConfig.isEnabledLoadExtension():186:186 -> <init>
    3186:3186:void <init>(java.lang.String,java.lang.String,java.util.Properties):82 -> <init>
    100:150:java.lang.String extractPragmasFromFilename(java.lang.String,java.util.Properties) -> a
    161:222:void open(int,int) -> a
    231:280:java.io.File extractResource(java.net.URL) -> a
    301:303:void setBusyTimeout(int) -> a
    318:320:java.lang.String libversion() -> c
    327:327:org.sqlite.core.DB db() -> a
    335:337:void checkOpen() -> e
    352:358:void checkCursor(int,int,int) -> a
    374:374:java.lang.String getDriverVersion() -> getDriverVersion
    382:383:void finalize() -> finalize
    389:396:void close() -> close
    41:53:void <clinit>() -> <clinit>
org.sqlite.core.CoreDatabaseMetaData -> J:
    org.sqlite.SQLiteConnection conn -> a
    java.sql.PreparedStatement getTableTypes -> a
    java.sql.PreparedStatement getTypeInfo -> b
    java.sql.PreparedStatement getCatalogs -> c
    java.sql.PreparedStatement getSchemas -> d
    java.sql.PreparedStatement getUDTs -> e
    java.sql.PreparedStatement getSuperTypes -> f
    java.sql.PreparedStatement getSuperTables -> g
    java.sql.PreparedStatement getTablePrivileges -> h
    java.sql.PreparedStatement getProcedures -> i
    java.sql.PreparedStatement getProcedureColumns -> j
    java.sql.PreparedStatement getAttributes -> k
    java.sql.PreparedStatement getBestRowIdentifier -> l
    java.sql.PreparedStatement getVersionColumns -> m
    java.sql.PreparedStatement getColumnPrivileges -> n
    java.sql.PreparedStatement getGeneratedKeys -> o
    int refCount -> refCount
    31:58:void <init>(org.sqlite.SQLiteConnection) -> <init>
    java.sql.ResultSet getGeneratedKeys() -> getGeneratedKeys
    66:69:void checkOpen() -> e
    75:157:void close() -> close
    165:169:java.lang.String quote(java.lang.String) -> quote
    182:190:java.lang.String escape(java.lang.String) -> escape
    300:301:void finalize() -> finalize
    198:206:void <clinit>() -> <clinit>
org.sqlite.core.CorePreparedStatement -> K:
    int columnCount -> f
    int paramCount -> g
    int batchQueryCount -> h
    38:48:void <init>(org.sqlite.SQLiteConnection,java.lang.String) -> <init>
    55:56:void finalize() -> finalize
    63:65:void checkParameters() -> f
    72:82:int[] executeBatch() -> executeBatch
    91:93:void clearBatch() -> clearBatch
    100:104:int getUpdateCount() -> getUpdateCount
    1061:1061:boolean org.sqlite.core.CoreResultSet.isOpen():61:61 -> getUpdateCount
    1061:1061:int getUpdateCount():100 -> getUpdateCount
    117:122:void batch(int,java.lang.Object) -> a
    129:142:void setDateByMilliseconds(int,java.lang.Long) -> a
    1432:1432:java.lang.String org.sqlite.date.FastDateFormat.format(java.util.Date):432:432 -> a
    1432:1432:void setDateByMilliseconds(int,java.lang.Long):131 -> a
    1441:1443:java.lang.String org.sqlite.date.FastDatePrinter.format(java.util.Date):441:443 -> a
    1441:1443:java.lang.String org.sqlite.date.FastDateFormat.format(java.util.Date):432 -> a
    1441:1443:void setDateByMilliseconds(int,java.lang.Long):131 -> a
    2425:2425:java.lang.String org.sqlite.date.FastDatePrinter.applyRulesToString(java.util.Calendar):425:425 -> a
    2425:2425:java.lang.String org.sqlite.date.FastDatePrinter.format(java.util.Date):443 -> a
    2425:2425:java.lang.String org.sqlite.date.FastDateFormat.format(java.util.Date):432 -> a
    2425:2425:void setDateByMilliseconds(int,java.lang.Long):131 -> a
org.sqlite.core.CorePreparedStatement$1 -> L:
    int[] $SwitchMap$org$sqlite$SQLiteConfig$DateClass -> a
    129:129:void <clinit>() -> <clinit>
org.sqlite.core.CoreResultSet -> M:
    org.sqlite.core.CoreStatement stmt -> a
    org.sqlite.core.DB db -> a
    boolean open -> open
    int maxRows -> i
    java.lang.String[] cols -> b
    java.lang.String[] colsMeta -> c
    boolean[][] meta -> a
    int limitRows -> j
    int row -> row
    int lastCol -> k
    boolean closeStmt -> c
    java.util.Map columnNameToIndex -> c
    31:52:void <init>(org.sqlite.core.CoreStatement) -> <init>
    68:71:void checkOpen() -> e
    80:86:int checkCol(int) -> a
    96:99:int markCol(int) -> b
    106:110:void checkMeta() -> g
    113:136:void close() -> close
org.sqlite.core.CoreStatement -> N:
    org.sqlite.SQLiteConnection conn -> a
    org.sqlite.core.DB db -> a
    org.sqlite.core.CoreResultSet rs -> a
    org.sqlite.core.CoreDatabaseMetaData metadata -> b
    long pointer -> b
    java.lang.String sql -> k
    int batchPos -> l
    java.lang.Object[] batch -> a
    boolean resultsWaiting -> d
    33:43:void <init>(org.sqlite.SQLiteConnection) -> <init>
    49:51:void checkOpen() -> e
    67:83:boolean exec() -> exec
    1061:1061:boolean org.sqlite.core.CoreResultSet.isOpen():61:61 -> exec
    1061:1061:boolean exec():69 -> exec
    114:127:void internalClose() -> h
    1886:1886:void org.sqlite.core.DB.throwex(int):886:886 -> h
    1886:1886:void internalClose():126 -> h
    java.sql.ResultSet executeQuery$ffd99d9(java.lang.String) -> a
org.sqlite.core.DB -> O:
    org.sqlite.SQLiteConnection conn -> a
    long begin -> c
    long commit -> d
    java.util.Map stmts -> d
    43:53:void <init>() -> <init>
    void interrupt() -> interrupt
    void busy_timeout(int) -> b
    java.lang.String errmsg() -> d
    java.lang.String libversion() -> c
    int changes() -> changes
    int total_changes() -> b
    int shared_cache(boolean) -> a
    int enable_load_extension(boolean) -> b
    144:161:void exec(java.lang.String) -> b
    1886:1886:void throwex(int):886:886 -> b
    1886:1886:void exec(java.lang.String):155 -> b
    173:175:void open(org.sqlite.SQLiteConnection,java.lang.String,int) -> a
    185:212:void close() -> close
    221:229:void prepare(org.sqlite.core.CoreStatement) -> a
    239:250:int finalize(org.sqlite.core.CoreStatement) -> a
    void _open(java.lang.String,int) -> a
    void _close() -> i
    int _exec(java.lang.String) -> a
    long prepare(java.lang.String) -> a
    int finalize(long) -> a
    int step(long) -> b
    int reset(long) -> c
    int clear_bindings(long) -> d
    int bind_parameter_count(long) -> e
    int column_count(long) -> f
    int column_type(long,int) -> a
    java.lang.String column_decltype(long,int) -> a
    java.lang.String column_table_name(long,int) -> b
    java.lang.String column_name(long,int) -> c
    java.lang.String column_text(long,int) -> d
    byte[] column_blob(long,int) -> a
    double column_double(long,int) -> a
    long column_long(long,int) -> a
    int column_int(long,int) -> b
    int bind_null(long,int) -> c
    int bind_int(long,int,int) -> a
    int bind_long(long,int,long) -> a
    int bind_double(long,int,double) -> a
    int bind_text(long,int,java.lang.String) -> a
    int bind_blob(long,int,byte[]) -> a
    void free_functions() -> j
    int backup$31ab3186$2a81f190(java.lang.String,java.lang.String) -> a
    int restore$31ab3186$2a81f190(java.lang.String,java.lang.String) -> b
    boolean[][] column_metadata(long) -> a
    691:695:java.lang.String[] column_names(long) -> a
    708:734:int sqlbind(long,int,java.lang.Object) -> a
    749:785:int[] executeBatch(long,int,java.lang.Object[]) -> a
    2886:2886:void throwex(int):886:886 -> a
    2886:2886:int[] executeBatch(long,int,java.lang.Object[]):764 -> a
    3886:3886:void throwex(int):886:886 -> a
    3886:3886:int[] executeBatch(long,int,java.lang.Object[]):774 -> a
    796:825:boolean execute(org.sqlite.core.CoreStatement,java.lang.Object[]) -> a
    4886:4886:void throwex(int):886:886 -> a
    4886:4886:boolean execute(org.sqlite.core.CoreStatement,java.lang.Object[]):806 -> a
    863:869:int executeUpdate(org.sqlite.core.CoreStatement,java.lang.Object[]) -> a
    907:911:org.sqlite.SQLiteException newSQLException(int,java.lang.String) -> a
    921:921:org.sqlite.SQLiteException newSQLException(int) -> a
    957:984:void ensureAutoCommit() -> k
    5886:5886:void throwex(int):886:886 -> k
    5886:5886:void ensureAutoCommit():976 -> k
org.sqlite.core.NativeDB -> P:
    boolean isLoaded -> e
    boolean loadSucceeded -> f
    28:62:void <init>() -> <init>
    53:58:boolean load() -> a
    71:72:void _open(java.lang.String,int) -> a
    void _open_utf8(byte[],int) -> a
    void _close() -> i
    87:87:int _exec(java.lang.String) -> a
    int _exec_utf8(byte[]) -> a
    int shared_cache(boolean) -> a
    int enable_load_extension(boolean) -> b
    void interrupt() -> interrupt
    void busy_timeout(int) -> b
    127:127:long prepare(java.lang.String) -> a
    long prepare_utf8(byte[]) -> a
    137:137:java.lang.String errmsg() -> d
    byte[] errmsg_utf8() -> a
    147:147:java.lang.String libversion() -> c
    byte[] libversion_utf8() -> b
    int changes() -> changes
    int total_changes() -> b
    int finalize(long) -> a
    int step(long) -> b
    int reset(long) -> c
    int clear_bindings(long) -> d
    int bind_parameter_count(long) -> e
    int column_count(long) -> f
    int column_type(long,int) -> a
    211:211:java.lang.String column_decltype(long,int) -> a
    byte[] column_decltype_utf8(long,int) -> b
    221:221:java.lang.String column_table_name(long,int) -> b
    byte[] column_table_name_utf8(long,int) -> c
    232:232:java.lang.String column_name(long,int) -> c
    byte[] column_name_utf8(long,int) -> d
    242:242:java.lang.String column_text(long,int) -> d
    byte[] column_text_utf8(long,int) -> e
    byte[] column_blob(long,int) -> a
    double column_double(long,int) -> a
    long column_long(long,int) -> a
    int column_int(long,int) -> b
    int bind_null(long,int) -> c
    int bind_int(long,int,int) -> a
    int bind_long(long,int,long) -> a
    int bind_double(long,int,double) -> a
    300:300:int bind_text(long,int,java.lang.String) -> a
    int bind_text_utf8(long,int,byte[]) -> b
    int bind_blob(long,int,byte[]) -> a
    void free_functions() -> j
    432:432:int backup$31ab3186$2a81f190(java.lang.String,java.lang.String) -> a
    int backup$73a6d800(byte[],byte[],org.sqlite.ExtendedCommand$SQLExtension) -> a
    446:446:int restore$31ab3186$2a81f190(java.lang.String,java.lang.String) -> b
    int restore$73a6d800(byte[],byte[],org.sqlite.ExtendedCommand$SQLExtension) -> b
    boolean[][] column_metadata(long) -> a
    475:482:byte[] stringToUtf8ByteArray(java.lang.String) -> b
    487:494:java.lang.String utf8ByteArrayToString(byte[]) -> b
    37:46:void <clinit>() -> <clinit>
org.sqlite.date.FastDateFormat -> Q:
    long serialVersionUID -> serialVersionUID
    org.sqlite.date.FormatCache cache -> a
    org.sqlite.date.FastDatePrinter printer -> a
    org.sqlite.date.FastDateParser parser -> a
    129:129:org.sqlite.date.FastDateFormat getInstance(java.lang.String) -> a
    144:144:org.sqlite.date.FastDateFormat getInstance(java.lang.String,java.util.TimeZone) -> a
    379:380:void <init>(java.lang.String,java.util.TimeZone,java.util.Locale) -> <init>
    393:396:void <init>(java.lang.String,java.util.TimeZone,java.util.Locale,byte) -> <init>
    411:411:java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition) -> format
    1398:1406:java.lang.StringBuffer org.sqlite.date.FastDatePrinter.format$7a1c13e8(java.lang.Object,java.lang.StringBuffer):398:406 -> format
    1398:1406:java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition):411 -> format
    1473:1473:java.lang.StringBuffer org.sqlite.date.FastDatePrinter.format(java.util.Calendar,java.lang.StringBuffer):473:473 -> format
    1473:1473:java.lang.StringBuffer org.sqlite.date.FastDatePrinter.format$7a1c13e8(java.lang.Object,java.lang.StringBuffer):401 -> format
    1473:1473:java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition):411 -> format
    2457:2457:java.lang.StringBuffer org.sqlite.date.FastDatePrinter.format(long,java.lang.StringBuffer):457:457 -> format
    2457:2457:java.lang.StringBuffer org.sqlite.date.FastDatePrinter.format$7a1c13e8(java.lang.Object,java.lang.StringBuffer):403 -> format
    2457:2457:java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition):411 -> format
    490:490:java.util.Date parse(java.lang.String) -> parse
    3291:3301:java.util.Date org.sqlite.date.FastDateParser.parse(java.lang.String):291:301 -> parse
    3291:3301:java.util.Date parse(java.lang.String):490 -> parse
    504:504:java.lang.Object parseObject(java.lang.String,java.text.ParsePosition) -> parseObject
    3308:3308:java.lang.Object org.sqlite.date.FastDateParser.parseObject(java.lang.String,java.text.ParsePosition):308:308 -> parseObject
    3308:3308:java.lang.Object parseObject(java.lang.String,java.text.ParsePosition):504 -> parseObject
    561:566:boolean equals(java.lang.Object) -> equals
    576:576:int hashCode() -> hashCode
    586:586:java.lang.String toString() -> toString
    3497:3497:java.lang.String org.sqlite.date.FastDatePrinter.getPattern():497:497 -> toString
    3497:3497:java.lang.String toString():586 -> toString
    3511:3511:java.util.Locale org.sqlite.date.FastDatePrinter.getLocale():511:511 -> toString
    3511:3511:java.lang.String toString():586 -> toString
    4504:4504:java.util.TimeZone org.sqlite.date.FastDatePrinter.getTimeZone():504:504 -> toString
    4504:4504:java.lang.String toString():586 -> toString
    98:98:void <clinit>() -> <clinit>
org.sqlite.date.FastDateFormat$1 -> R:
    98:98:void <init>() -> <init>
    98:98:java.text.Format createInstance(java.lang.String,java.util.TimeZone,java.util.Locale) -> a
    1101:1101:org.sqlite.date.FastDateFormat createInstance(java.lang.String,java.util.TimeZone,java.util.Locale):101:101 -> a
    1101:1101:java.text.Format createInstance(java.lang.String,java.util.TimeZone,java.util.Locale):98 -> a
org.sqlite.date.FastDateParser -> S:
    long serialVersionUID -> serialVersionUID
    java.util.Locale JAPANESE_IMPERIAL -> a
    java.lang.String pattern -> pattern
    java.util.TimeZone timeZone -> a
    java.util.Locale locale -> locale
    int century -> m
    int startYear -> n
    java.util.regex.Pattern parsePattern -> c
    org.sqlite.date.FastDateParser$Strategy[] strategies -> a
    java.lang.String currentFormatField -> l
    org.sqlite.date.FastDateParser$Strategy nextStrategy -> a
    java.util.regex.Pattern formatPattern -> d
    java.util.concurrent.ConcurrentMap[] caches -> a
    org.sqlite.date.FastDateParser$Strategy ABBREVIATED_YEAR_STRATEGY -> b
    org.sqlite.date.FastDateParser$Strategy NUMBER_MONTH_STRATEGY -> c
    org.sqlite.date.FastDateParser$Strategy LITERAL_YEAR_STRATEGY -> d
    org.sqlite.date.FastDateParser$Strategy WEEK_OF_YEAR_STRATEGY -> e
    org.sqlite.date.FastDateParser$Strategy WEEK_OF_MONTH_STRATEGY -> f
    org.sqlite.date.FastDateParser$Strategy DAY_OF_YEAR_STRATEGY -> g
    org.sqlite.date.FastDateParser$Strategy DAY_OF_MONTH_STRATEGY -> h
    org.sqlite.date.FastDateParser$Strategy DAY_OF_WEEK_IN_MONTH_STRATEGY -> i
    org.sqlite.date.FastDateParser$Strategy HOUR_OF_DAY_STRATEGY -> j
    org.sqlite.date.FastDateParser$Strategy HOUR24_OF_DAY_STRATEGY -> k
    org.sqlite.date.FastDateParser$Strategy HOUR12_STRATEGY -> l
    org.sqlite.date.FastDateParser$Strategy HOUR_STRATEGY -> m
    org.sqlite.date.FastDateParser$Strategy MINUTE_STRATEGY -> n
    org.sqlite.date.FastDateParser$Strategy SECOND_STRATEGY -> o
    org.sqlite.date.FastDateParser$Strategy MILLISECOND_STRATEGY -> p
    org.sqlite.date.FastDateParser$Strategy ISO_8601_STRATEGY -> q
    123:146:void <init>(java.lang.String,java.util.TimeZone,java.util.Locale) -> <init>
    156:190:void init(java.util.Calendar) -> a
    234:240:boolean equals(java.lang.Object) -> equals
    250:250:int hashCode() -> hashCode
    260:260:java.lang.String toString() -> toString
    274:278:void readObject(java.io.ObjectInputStream) -> readObject
    324:338:java.util.Date parse(java.lang.String,java.text.ParsePosition) -> parse
    482:532:org.sqlite.date.FastDateParser$Strategy getStrategy(java.lang.String,java.util.Calendar) -> a
    545:550:java.util.concurrent.ConcurrentMap getCache(int) -> a
    560:571:org.sqlite.date.FastDateParser$Strategy getLocaleSpecificStrategy(int,java.util.Calendar) -> a
    72:72:java.lang.StringBuilder access$100(java.lang.StringBuilder,java.lang.String,boolean) -> a
    1352:1388:java.lang.StringBuilder escapeRegex(java.lang.StringBuilder,java.lang.String,boolean):352:388 -> a
    1352:1388:java.lang.StringBuilder access$100(java.lang.StringBuilder,java.lang.String,boolean):72 -> a
    72:72:java.util.Map access$200(int,java.util.Calendar,java.util.Locale) -> a
    1400:1400:java.util.Map getDisplayNames(int,java.util.Calendar,java.util.Locale):400:400 -> a
    1400:1400:java.util.Map access$200(int,java.util.Calendar,java.util.Locale):72 -> a
    72:72:int access$300(org.sqlite.date.FastDateParser,int) -> a
    1409:1410:int adjustYear(int):409:410 -> a
    1409:1410:int access$300(org.sqlite.date.FastDateParser,int):72 -> a
    80:921:void <clinit>() -> <clinit>
org.sqlite.date.FastDateParser$1 -> T:
    723:723:void <init>() -> <init>
    729:734:void setCalendar(org.sqlite.date.FastDateParser,java.util.Calendar,java.lang.String) -> a
org.sqlite.date.FastDateParser$2 -> U:
    892:892:void <init>() -> <init>
    895:895:int modify(int) -> c
org.sqlite.date.FastDateParser$3 -> V:
    905:905:void <init>() -> <init>
    908:908:int modify(int) -> c
org.sqlite.date.FastDateParser$4 -> W:
    911:911:void <init>() -> <init>
    914:914:int modify(int) -> c
org.sqlite.date.FastDateParser$CaseInsensitiveTextStrategy -> X:
    int field -> field
    java.util.Locale locale -> locale
    java.util.Map lKeyValues -> e
    624:633:void <init>(int,java.util.Calendar,java.util.Locale) -> <init>
    640:645:boolean addRegex(org.sqlite.date.FastDateParser,java.lang.StringBuilder) -> a
    653:664:void setCalendar(org.sqlite.date.FastDateParser,java.util.Calendar,java.lang.String) -> a
org.sqlite.date.FastDateParser$CopyQuotedStrategy -> Y:
    java.lang.String formatField -> m
    584:586:void <init>(java.lang.String) -> <init>
    593:597:boolean isNumber() -> isNumber
    605:606:boolean addRegex(org.sqlite.date.FastDateParser,java.lang.StringBuilder) -> a
org.sqlite.date.FastDateParser$ISO8601TimeZoneStrategy -> Z:
    java.lang.String pattern -> pattern
    org.sqlite.date.FastDateParser$Strategy ISO_8601_1_STRATEGY -> r
    org.sqlite.date.FastDateParser$Strategy ISO_8601_2_STRATEGY -> s
    org.sqlite.date.FastDateParser$Strategy ISO_8601_3_STRATEGY -> t
    842:844:void <init>(java.lang.String) -> <init>
    851:852:boolean addRegex(org.sqlite.date.FastDateParser,java.lang.StringBuilder) -> a
    860:865:void setCalendar(org.sqlite.date.FastDateParser,java.util.Calendar,java.lang.String) -> a
    879:887:org.sqlite.date.FastDateParser$Strategy getStrategy(int) -> a
    867:869:void <clinit>() -> <clinit>
org.sqlite.date.FastDateParser$NumberStrategy -> aa:
    int field -> field
    678:680:void <init>(int) -> <init>
    687:687:boolean isNumber() -> isNumber
    696:702:boolean addRegex(org.sqlite.date.FastDateParser,java.lang.StringBuilder) -> a
    1418:1418:boolean org.sqlite.date.FastDateParser.isNextNumber():418:418 -> a
    1418:1418:boolean addRegex(org.sqlite.date.FastDateParser,java.lang.StringBuilder):696 -> a
    1426:1426:int org.sqlite.date.FastDateParser.getFieldWidth():426:426 -> a
    1426:1426:boolean addRegex(org.sqlite.date.FastDateParser,java.lang.StringBuilder):697 -> a
    710:711:void setCalendar(org.sqlite.date.FastDateParser,java.util.Calendar,java.lang.String) -> a
    719:719:int modify(int) -> c
org.sqlite.date.FastDateParser$Strategy -> ab:
    432:432:void <init>() -> <init>
    441:441:boolean isNumber() -> isNumber
    455:455:void setCalendar(org.sqlite.date.FastDateParser,java.util.Calendar,java.lang.String) -> a
    boolean addRegex(org.sqlite.date.FastDateParser,java.lang.StringBuilder) -> a
    432:432:void <init>(byte) -> <init>
org.sqlite.date.FastDateParser$TimeZoneStrategy -> ac:
    java.lang.String validTimeZoneChars -> n
    java.util.SortedMap tzNames -> a
    743:801:void <init>(java.util.Locale) -> <init>
    808:809:boolean addRegex(org.sqlite.date.FastDateParser,java.lang.StringBuilder) -> a
    818:831:void setCalendar(org.sqlite.date.FastDateParser,java.util.Calendar,java.lang.String) -> a
org.sqlite.date.FastDatePrinter -> ad:
    long serialVersionUID -> serialVersionUID
    java.lang.String mPattern -> o
    java.util.TimeZone mTimeZone -> b
    java.util.Locale mLocale -> b
    org.sqlite.ExtendedCommand$SQLExtension[] mRules$6d503b6f -> a
    int mMaxLengthEstimate -> o
    java.util.concurrent.ConcurrentMap cTimeZoneDisplayCache -> a
    150:156:void <init>(java.lang.String,java.util.TimeZone,java.util.Locale) -> <init>
    162:171:void init() -> init
    1182:1306:java.util.List parsePattern():182:306 -> init
    1182:1306:void init():162 -> init
    317:365:java.lang.String parseToken(java.lang.String,int[]) -> a
    376:382:org.sqlite.ExtendedCommand$SQLExtension selectNumberRule$7b856e32$6985b997(int,int) -> a
    434:434:java.util.GregorianCalendar newCalendar() -> a
    464:466:java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer) -> a
    485:488:java.lang.StringBuffer applyRules(java.util.Calendar,java.lang.StringBuffer) -> a
    537:543:boolean equals(java.lang.Object) -> equals
    553:553:int hashCode() -> hashCode
    563:563:java.lang.String toString() -> toString
    577:579:void readObject(java.io.ObjectInputStream) -> readObject
    1074:1084:java.lang.String getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale) -> a
    80:80:void access$000(java.lang.StringBuffer,int) -> b
    1588:1590:void appendDigits(java.lang.StringBuffer,int):588:590 -> b
    1588:1590:void access$000(java.lang.StringBuffer,int):80 -> b
    1062:1062:void <clinit>() -> <clinit>
org.sqlite.date.FastDatePrinter$CharacterLiteral -> ae:
    char mValue -> a
    639:641:void <init>(char) -> <init>
    647:647:int estimateLength() -> a
    654:655:void appendTo(java.lang.StringBuffer,java.util.Calendar) -> a
org.sqlite.date.FastDatePrinter$Iso8601_Rule -> af:
    org.sqlite.date.FastDatePrinter$Iso8601_Rule ISO8601_HOURS -> a
    org.sqlite.date.FastDatePrinter$Iso8601_Rule ISO8601_HOURS_MINUTES -> b
    org.sqlite.date.FastDatePrinter$Iso8601_Rule ISO8601_HOURS_COLON_MINUTES -> c
    int length -> length
    1215:1223:org.sqlite.date.FastDatePrinter$Iso8601_Rule getRule(int) -> a
    1234:1236:void <init>(int) -> <init>
    1242:1242:int estimateLength() -> a
    1249:1277:void appendTo(java.lang.StringBuffer,java.util.Calendar) -> a
    1201:1205:void <clinit>() -> <clinit>
org.sqlite.date.FastDatePrinter$PaddedNumberField -> ag:
    int mField -> p
    int mSize -> q
    826:833:void <init>(int,int) -> <init>
    839:839:int estimateLength() -> a
    846:847:void appendTo(java.lang.StringBuffer,java.util.Calendar) -> a
    854:862:void appendTo(java.lang.StringBuffer,int) -> a
org.sqlite.date.FastDatePrinter$StringLiteral -> ah:
    java.lang.String mValue -> p
    670:672:void <init>(java.lang.String) -> <init>
    678:678:int estimateLength() -> a
    685:686:void appendTo(java.lang.StringBuffer,java.util.Calendar) -> a
org.sqlite.date.FastDatePrinter$TextField -> ai:
    int mField -> p
    java.lang.String[] mValues -> d
    703:706:void <init>(int,java.lang.String[]) -> <init>
    712:719:int estimateLength() -> a
    726:727:void appendTo(java.lang.StringBuffer,java.util.Calendar) -> a
org.sqlite.date.FastDatePrinter$TimeZoneDisplayKey -> aj:
    java.util.TimeZone mTimeZone -> b
    int mStyle -> r
    java.util.Locale mLocale -> b
    1298:1306:void <init>(java.util.TimeZone,boolean,int,java.util.Locale) -> <init>
    1313:1313:int hashCode() -> hashCode
    1321:1331:boolean equals(java.lang.Object) -> equals
org.sqlite.date.FastDatePrinter$TimeZoneNameRule -> ak:
    java.util.Locale mLocale -> b
    int mStyle -> r
    java.lang.String mStandard -> q
    java.lang.String mDaylight -> r
    1103:1109:void <init>(java.util.TimeZone,java.util.Locale,int) -> <init>
    1118:1118:int estimateLength() -> a
    1125:1131:void appendTo(java.lang.StringBuffer,java.util.Calendar) -> a
org.sqlite.date.FastDatePrinter$TimeZoneNumberRule -> al:
    org.sqlite.date.FastDatePrinter$TimeZoneNumberRule INSTANCE_COLON -> a
    org.sqlite.date.FastDatePrinter$TimeZoneNumberRule INSTANCE_NO_COLON -> b
    org.sqlite.date.FastDatePrinter$TimeZoneNumberRule INSTANCE_ISO_8601 -> c
    boolean mColon -> g
    boolean mISO8601 -> h
    1152:1155:void <init>(boolean,boolean) -> <init>
    1161:1161:int estimateLength() -> a
    1168:1191:void appendTo(java.lang.StringBuffer,java.util.Calendar) -> a
    1139:1141:void <clinit>() -> <clinit>
org.sqlite.date.FastDatePrinter$TwelveHourField -> am:
    org.sqlite.ExtendedCommand$SQLExtension mRule$5625d56d$1f57e076 -> a
    988:990:void <init>(org.sqlite.ExtendedCommand$SQLExtension) -> <init>
    996:996:int estimateLength() -> a
    1003:1008:void appendTo(java.lang.StringBuffer,java.util.Calendar) -> a
    1014:1015:void appendTo(java.lang.StringBuffer,int) -> a
org.sqlite.date.FastDatePrinter$TwentyFourHourField -> an:
    org.sqlite.ExtendedCommand$SQLExtension mRule$5625d56d$1f57e076 -> a
    1030:1032:void <init>(org.sqlite.ExtendedCommand$SQLExtension) -> <init>
    1038:1038:int estimateLength() -> a
    1045:1050:void appendTo(java.lang.StringBuffer,java.util.Calendar) -> a
    1056:1057:void appendTo(java.lang.StringBuffer,int) -> a
org.sqlite.date.FastDatePrinter$TwoDigitMonthField -> ao:
    org.sqlite.date.FastDatePrinter$TwoDigitMonthField INSTANCE -> a
    951:952:void <init>() -> <init>
    958:958:int estimateLength() -> a
    965:966:void appendTo(java.lang.StringBuffer,java.util.Calendar) -> a
    1972:1973:void appendTo(java.lang.StringBuffer,int):972:973 -> a
    1972:1973:void appendTo(java.lang.StringBuffer,java.util.Calendar):965 -> a
    972:973:void appendTo(java.lang.StringBuffer,int) -> a
    945:945:void <clinit>() -> <clinit>
org.sqlite.date.FastDatePrinter$TwoDigitNumberField -> ap:
    int mField -> p
    876:878:void <init>(int) -> <init>
    884:884:int estimateLength() -> a
    891:892:void appendTo(java.lang.StringBuffer,java.util.Calendar) -> a
    898:903:void appendTo(java.lang.StringBuffer,int) -> a
org.sqlite.date.FastDatePrinter$TwoDigitYearField -> aq:
    org.sqlite.date.FastDatePrinter$TwoDigitYearField INSTANCE -> a
    916:917:void <init>() -> <init>
    923:923:int estimateLength() -> a
    930:931:void appendTo(java.lang.StringBuffer,java.util.Calendar) -> a
    1937:1938:void appendTo(java.lang.StringBuffer,int):937:938 -> a
    1937:1938:void appendTo(java.lang.StringBuffer,java.util.Calendar):930 -> a
    937:938:void appendTo(java.lang.StringBuffer,int) -> a
    910:910:void <clinit>() -> <clinit>
org.sqlite.date.FastDatePrinter$UnpaddedMonthField -> ar:
    org.sqlite.date.FastDatePrinter$UnpaddedMonthField INSTANCE -> a
    784:785:void <init>() -> <init>
    791:791:int estimateLength() -> a
    798:799:void appendTo(java.lang.StringBuffer,java.util.Calendar) -> a
    805:810:void appendTo(java.lang.StringBuffer,int) -> a
    777:777:void <clinit>() -> <clinit>
org.sqlite.date.FastDatePrinter$UnpaddedNumberField -> as:
    int mField -> p
    741:743:void <init>(int) -> <init>
    749:749:int estimateLength() -> a
    756:757:void appendTo(java.lang.StringBuffer,java.util.Calendar) -> a
    763:770:void appendTo(java.lang.StringBuffer,int) -> a
org.sqlite.date.FormatCache -> at:
    java.util.concurrent.ConcurrentMap cInstanceCache -> b
    35:41:void <init>() -> <init>
    70:90:java.text.Format getInstance$b9d09af(java.lang.String,java.util.TimeZone) -> a
    java.text.Format createInstance(java.lang.String,java.util.TimeZone,java.util.Locale) -> a
    44:44:void <clinit>() -> <clinit>
org.sqlite.date.FormatCache$MultipartKey -> au:
    java.lang.Object[] keys -> keys
    int hashCode -> hashCode
    233:235:void <init>(java.lang.Object[]) -> <init>
    245:245:boolean equals(java.lang.Object) -> equals
    253:262:int hashCode() -> hashCode
org.sqlite.jdbc3.JDBC3Connection -> av:
    java.util.concurrent.atomic.AtomicInteger savePoint -> a
    java.util.Map typeMap -> f
    22:27:void <init>(java.lang.String,java.lang.String,java.util.Properties) -> <init>
    33:34:java.lang.String getCatalog() -> getCatalog
    41:42:void setCatalog(java.lang.String) -> setCatalog
    48:49:int getHoldability() -> getHoldability
    56:59:void setHoldability(int) -> setHoldability
    65:65:int getTransactionIsolation() -> getTransactionIsolation
    72:85:void setTransactionIsolation(int) -> setTransactionIsolation
    90:96:java.util.Map getTypeMap() -> getTypeMap
    103:106:void setTypeMap(java.util.Map) -> setTypeMap
    112:112:boolean isReadOnly() -> isReadOnly
    120:125:void setReadOnly(boolean) -> setReadOnly
    133:133:java.lang.String nativeSQL(java.lang.String) -> nativeSQL
    139:139:void clearWarnings() -> clearWarnings
    145:145:java.sql.SQLWarning getWarnings() -> getWarnings
    152:153:boolean getAutoCommit() -> getAutoCommit
    160:165:void setAutoCommit(boolean) -> setAutoCommit
    171:176:void commit() -> commit
    182:187:void rollback() -> rollback
    193:193:java.sql.Statement createStatement() -> createStatement
    201:201:java.sql.Statement createStatement(int,int) -> createStatement
    java.sql.Statement createStatement(int,int,int) -> createStatement
    213:213:java.sql.CallableStatement prepareCall(java.lang.String) -> prepareCall
    221:221:java.sql.CallableStatement prepareCall(java.lang.String,int,int) -> prepareCall
    228:228:java.sql.CallableStatement prepareCall(java.lang.String,int,int,int) -> prepareCall
    235:235:java.sql.PreparedStatement prepareStatement(java.lang.String) -> prepareStatement
    242:242:java.sql.PreparedStatement prepareStatement(java.lang.String,int) -> prepareStatement
    249:249:java.sql.PreparedStatement prepareStatement(java.lang.String,int[]) -> prepareStatement
    256:256:java.sql.PreparedStatement prepareStatement(java.lang.String,java.lang.String[]) -> prepareStatement
    263:263:java.sql.PreparedStatement prepareStatement(java.lang.String,int,int) -> prepareStatement
    java.sql.PreparedStatement prepareStatement(java.lang.String,int,int,int) -> prepareStatement
    275:284:java.sql.Savepoint setSavepoint() -> setSavepoint
    291:300:java.sql.Savepoint setSavepoint(java.lang.String) -> setSavepoint
    307:311:void releaseSavepoint(java.sql.Savepoint) -> releaseSavepoint
    317:321:void rollback(java.sql.Savepoint) -> rollback
    326:326:java.sql.Struct createStruct(java.lang.String,java.lang.Object[]) -> createStruct
org.sqlite.jdbc3.JDBC3DatabaseMetaData -> aw:
    java.util.regex.Pattern TYPE_INTEGER -> e
    java.util.regex.Pattern TYPE_VARCHAR -> f
    java.util.regex.Pattern TYPE_FLOAT -> g
    java.util.regex.Pattern TYPE_AUTO_INCREMENT -> h
    java.util.Map RULE_MAP -> g
    java.util.regex.Pattern FK_NAMED_PATTERN -> i
    java.util.regex.Pattern PK_UNNAMED_PATTERN -> j
    java.util.regex.Pattern PK_NAMED_PATTERN -> k
    25:26:void <init>(org.sqlite.SQLiteConnection) -> <init>
    32:32:java.sql.Connection getConnection() -> getConnection
    39:39:int getDatabaseMajorVersion() -> getDatabaseMajorVersion
    46:46:int getDatabaseMinorVersion() -> getDatabaseMinorVersion
    53:53:int getDriverMajorVersion() -> getDriverMajorVersion
    60:60:int getDriverMinorVersion() -> getDriverMinorVersion
    67:67:int getJDBCMajorVersion() -> getJDBCMajorVersion
    74:74:int getJDBCMinorVersion() -> getJDBCMinorVersion
    81:81:int getDefaultTransactionIsolation() -> getDefaultTransactionIsolation
    88:88:int getMaxBinaryLiteralLength() -> getMaxBinaryLiteralLength
    95:95:int getMaxCatalogNameLength() -> getMaxCatalogNameLength
    102:102:int getMaxCharLiteralLength() -> getMaxCharLiteralLength
    109:109:int getMaxColumnNameLength() -> getMaxColumnNameLength
    116:116:int getMaxColumnsInGroupBy() -> getMaxColumnsInGroupBy
    123:123:int getMaxColumnsInIndex() -> getMaxColumnsInIndex
    130:130:int getMaxColumnsInOrderBy() -> getMaxColumnsInOrderBy
    137:137:int getMaxColumnsInSelect() -> getMaxColumnsInSelect
    144:144:int getMaxColumnsInTable() -> getMaxColumnsInTable
    151:151:int getMaxConnections() -> getMaxConnections
    158:158:int getMaxCursorNameLength() -> getMaxCursorNameLength
    165:165:int getMaxIndexLength() -> getMaxIndexLength
    172:172:int getMaxProcedureNameLength() -> getMaxProcedureNameLength
    179:179:int getMaxRowSize() -> getMaxRowSize
    186:186:int getMaxSchemaNameLength() -> getMaxSchemaNameLength
    193:193:int getMaxStatementLength() -> getMaxStatementLength
    200:200:int getMaxStatements() -> getMaxStatements
    207:207:int getMaxTableNameLength() -> getMaxTableNameLength
    214:214:int getMaxTablesInSelect() -> getMaxTablesInSelect
    221:221:int getMaxUserNameLength() -> getMaxUserNameLength
    228:228:int getResultSetHoldability() -> getResultSetHoldability
    235:235:int getSQLStateType() -> getSQLStateType
    242:242:java.lang.String getDatabaseProductName() -> getDatabaseProductName
    249:249:java.lang.String getDatabaseProductVersion() -> getDatabaseProductVersion
    256:256:java.lang.String getDriverName() -> getDriverName
    263:263:java.lang.String getDriverVersion() -> getDriverVersion
    270:270:java.lang.String getExtraNameCharacters() -> getExtraNameCharacters
    277:277:java.lang.String getCatalogSeparator() -> getCatalogSeparator
    284:284:java.lang.String getCatalogTerm() -> getCatalogTerm
    291:291:java.lang.String getSchemaTerm() -> getSchemaTerm
    298:298:java.lang.String getProcedureTerm() -> getProcedureTerm
    305:305:java.lang.String getSearchStringEscape() -> getSearchStringEscape
    312:312:java.lang.String getIdentifierQuoteString() -> getIdentifierQuoteString
    319:319:java.lang.String getSQLKeywords() -> getSQLKeywords
    326:326:java.lang.String getNumericFunctions() -> getNumericFunctions
    333:333:java.lang.String getStringFunctions() -> getStringFunctions
    340:340:java.lang.String getSystemFunctions() -> getSystemFunctions
    347:347:java.lang.String getTimeDateFunctions() -> getTimeDateFunctions
    354:354:java.lang.String getURL() -> getURL
    2309:2309:java.lang.String org.sqlite.core.CoreConnection.url():309:309 -> getURL
    2309:2309:java.lang.String getURL():354 -> getURL
    361:361:java.lang.String getUserName() -> getUserName
    368:368:boolean allProceduresAreCallable() -> allProceduresAreCallable
    375:375:boolean allTablesAreSelectable() -> allTablesAreSelectable
    382:382:boolean dataDefinitionCausesTransactionCommit() -> dataDefinitionCausesTransactionCommit
    389:389:boolean dataDefinitionIgnoredInTransactions() -> dataDefinitionIgnoredInTransactions
    396:396:boolean doesMaxRowSizeIncludeBlobs() -> doesMaxRowSizeIncludeBlobs
    403:403:boolean deletesAreDetected(int) -> deletesAreDetected
    410:410:boolean insertsAreDetected(int) -> insertsAreDetected
    417:417:boolean isCatalogAtStart() -> isCatalogAtStart
    424:424:boolean locatorsUpdateCopy() -> locatorsUpdateCopy
    431:431:boolean nullPlusNonNullIsNull() -> nullPlusNonNullIsNull
    438:438:boolean nullsAreSortedAtEnd() -> nullsAreSortedAtEnd
    445:445:boolean nullsAreSortedAtStart() -> nullsAreSortedAtStart
    452:452:boolean nullsAreSortedHigh() -> nullsAreSortedHigh
    459:459:boolean nullsAreSortedLow() -> nullsAreSortedLow
    466:466:boolean othersDeletesAreVisible(int) -> othersDeletesAreVisible
    473:473:boolean othersInsertsAreVisible(int) -> othersInsertsAreVisible
    480:480:boolean othersUpdatesAreVisible(int) -> othersUpdatesAreVisible
    487:487:boolean ownDeletesAreVisible(int) -> ownDeletesAreVisible
    494:494:boolean ownInsertsAreVisible(int) -> ownInsertsAreVisible
    501:501:boolean ownUpdatesAreVisible(int) -> ownUpdatesAreVisible
    508:508:boolean storesLowerCaseIdentifiers() -> storesLowerCaseIdentifiers
    515:515:boolean storesLowerCaseQuotedIdentifiers() -> storesLowerCaseQuotedIdentifiers
    522:522:boolean storesMixedCaseIdentifiers() -> storesMixedCaseIdentifiers
    529:529:boolean storesMixedCaseQuotedIdentifiers() -> storesMixedCaseQuotedIdentifiers
    536:536:boolean storesUpperCaseIdentifiers() -> storesUpperCaseIdentifiers
    543:543:boolean storesUpperCaseQuotedIdentifiers() -> storesUpperCaseQuotedIdentifiers
    550:550:boolean supportsAlterTableWithAddColumn() -> supportsAlterTableWithAddColumn
    557:557:boolean supportsAlterTableWithDropColumn() -> supportsAlterTableWithDropColumn
    564:564:boolean supportsANSI92EntryLevelSQL() -> supportsANSI92EntryLevelSQL
    571:571:boolean supportsANSI92FullSQL() -> supportsANSI92FullSQL
    578:578:boolean supportsANSI92IntermediateSQL() -> supportsANSI92IntermediateSQL
    585:585:boolean supportsBatchUpdates() -> supportsBatchUpdates
    592:592:boolean supportsCatalogsInDataManipulation() -> supportsCatalogsInDataManipulation
    599:599:boolean supportsCatalogsInIndexDefinitions() -> supportsCatalogsInIndexDefinitions
    606:606:boolean supportsCatalogsInPrivilegeDefinitions() -> supportsCatalogsInPrivilegeDefinitions
    613:613:boolean supportsCatalogsInProcedureCalls() -> supportsCatalogsInProcedureCalls
    620:620:boolean supportsCatalogsInTableDefinitions() -> supportsCatalogsInTableDefinitions
    627:627:boolean supportsColumnAliasing() -> supportsColumnAliasing
    634:634:boolean supportsConvert() -> supportsConvert
    641:641:boolean supportsConvert(int,int) -> supportsConvert
    648:648:boolean supportsCorrelatedSubqueries() -> supportsCorrelatedSubqueries
    655:655:boolean supportsDataDefinitionAndDataManipulationTransactions() -> supportsDataDefinitionAndDataManipulationTransactions
    662:662:boolean supportsDataManipulationTransactionsOnly() -> supportsDataManipulationTransactionsOnly
    669:669:boolean supportsDifferentTableCorrelationNames() -> supportsDifferentTableCorrelationNames
    676:676:boolean supportsExpressionsInOrderBy() -> supportsExpressionsInOrderBy
    683:683:boolean supportsMinimumSQLGrammar() -> supportsMinimumSQLGrammar
    690:690:boolean supportsCoreSQLGrammar() -> supportsCoreSQLGrammar
    697:697:boolean supportsExtendedSQLGrammar() -> supportsExtendedSQLGrammar
    704:704:boolean supportsLimitedOuterJoins() -> supportsLimitedOuterJoins
    711:711:boolean supportsFullOuterJoins() -> supportsFullOuterJoins
    718:718:boolean supportsGetGeneratedKeys() -> supportsGetGeneratedKeys
    725:725:boolean supportsGroupBy() -> supportsGroupBy
    732:732:boolean supportsGroupByBeyondSelect() -> supportsGroupByBeyondSelect
    739:739:boolean supportsGroupByUnrelated() -> supportsGroupByUnrelated
    746:746:boolean supportsIntegrityEnhancementFacility() -> supportsIntegrityEnhancementFacility
    753:753:boolean supportsLikeEscapeClause() -> supportsLikeEscapeClause
    760:760:boolean supportsMixedCaseIdentifiers() -> supportsMixedCaseIdentifiers
    767:767:boolean supportsMixedCaseQuotedIdentifiers() -> supportsMixedCaseQuotedIdentifiers
    774:774:boolean supportsMultipleOpenResults() -> supportsMultipleOpenResults
    781:781:boolean supportsMultipleResultSets() -> supportsMultipleResultSets
    788:788:boolean supportsMultipleTransactions() -> supportsMultipleTransactions
    795:795:boolean supportsNamedParameters() -> supportsNamedParameters
    802:802:boolean supportsNonNullableColumns() -> supportsNonNullableColumns
    809:809:boolean supportsOpenCursorsAcrossCommit() -> supportsOpenCursorsAcrossCommit
    816:816:boolean supportsOpenCursorsAcrossRollback() -> supportsOpenCursorsAcrossRollback
    823:823:boolean supportsOpenStatementsAcrossCommit() -> supportsOpenStatementsAcrossCommit
    830:830:boolean supportsOpenStatementsAcrossRollback() -> supportsOpenStatementsAcrossRollback
    837:837:boolean supportsOrderByUnrelated() -> supportsOrderByUnrelated
    844:844:boolean supportsOuterJoins() -> supportsOuterJoins
    851:851:boolean supportsPositionedDelete() -> supportsPositionedDelete
    858:858:boolean supportsPositionedUpdate() -> supportsPositionedUpdate
    865:865:boolean supportsResultSetConcurrency(int,int) -> supportsResultSetConcurrency
    872:872:boolean supportsResultSetHoldability(int) -> supportsResultSetHoldability
    879:879:boolean supportsResultSetType(int) -> supportsResultSetType
    886:886:boolean supportsSavepoints() -> supportsSavepoints
    893:893:boolean supportsSchemasInDataManipulation() -> supportsSchemasInDataManipulation
    900:900:boolean supportsSchemasInIndexDefinitions() -> supportsSchemasInIndexDefinitions
    907:907:boolean supportsSchemasInPrivilegeDefinitions() -> supportsSchemasInPrivilegeDefinitions
    914:914:boolean supportsSchemasInProcedureCalls() -> supportsSchemasInProcedureCalls
    921:921:boolean supportsSchemasInTableDefinitions() -> supportsSchemasInTableDefinitions
    928:928:boolean supportsSelectForUpdate() -> supportsSelectForUpdate
    935:935:boolean supportsStatementPooling() -> supportsStatementPooling
    942:942:boolean supportsStoredProcedures() -> supportsStoredProcedures
    949:949:boolean supportsSubqueriesInComparisons() -> supportsSubqueriesInComparisons
    956:956:boolean supportsSubqueriesInExists() -> supportsSubqueriesInExists
    963:963:boolean supportsSubqueriesInIns() -> supportsSubqueriesInIns
    970:970:boolean supportsSubqueriesInQuantifieds() -> supportsSubqueriesInQuantifieds
    977:977:boolean supportsTableCorrelationNames() -> supportsTableCorrelationNames
    984:984:boolean supportsTransactionIsolationLevel(int) -> supportsTransactionIsolationLevel
    991:991:boolean supportsTransactions() -> supportsTransactions
    998:998:boolean supportsUnion() -> supportsUnion
    1005:1005:boolean supportsUnionAll() -> supportsUnionAll
    1012:1012:boolean updatesAreDetected(int) -> updatesAreDetected
    1019:1019:boolean usesLocalFilePerTable() -> usesLocalFilePerTable
    1026:1026:boolean usesLocalFiles() -> usesLocalFiles
    1033:1033:boolean isReadOnly() -> isReadOnly
    1041:1051:java.sql.ResultSet getAttributes(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> getAttributes
    1059:1065:java.sql.ResultSet getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean) -> getBestRowIdentifier
    1073:1079:java.sql.ResultSet getColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> getColumnPrivileges
    1141:1260:java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> getColumns
    1267:1283:java.sql.ResultSet getCrossReference(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> getCrossReference
    1290:1294:java.sql.ResultSet getSchemas() -> getSchemas
    1301:1305:java.sql.ResultSet getCatalogs() -> getCatalogs
    1313:1337:java.sql.ResultSet getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String) -> getPrimaryKeys
    2934:2934:java.lang.String[] org.sqlite.jdbc3.JDBC3DatabaseMetaData$PrimaryKeyFinder.getColumns():1934:1934 -> getPrimaryKeys
    2934:2934:java.sql.ResultSet getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String):1314 -> getPrimaryKeys
    3927:3927:java.lang.String org.sqlite.jdbc3.JDBC3DatabaseMetaData$PrimaryKeyFinder.getName():1927:1927 -> getPrimaryKeys
    3927:3927:java.sql.ResultSet getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String):1328 -> getPrimaryKeys
    1362:1478:java.sql.ResultSet getExportedKeys(java.lang.String,java.lang.String,java.lang.String) -> getExportedKeys
    3934:3934:java.lang.String[] org.sqlite.jdbc3.JDBC3DatabaseMetaData$PrimaryKeyFinder.getColumns():1934:1934 -> getExportedKeys
    3934:3934:java.sql.ResultSet getExportedKeys(java.lang.String,java.lang.String,java.lang.String):1363 -> getExportedKeys
    4927:4927:java.lang.String org.sqlite.jdbc3.JDBC3DatabaseMetaData$PrimaryKeyFinder.getName():1927:1927 -> getExportedKeys
    4927:4927:java.sql.ResultSet getExportedKeys(java.lang.String,java.lang.String,java.lang.String):1467 -> getExportedKeys
    5927:5927:java.lang.String org.sqlite.jdbc3.JDBC3DatabaseMetaData$PrimaryKeyFinder.getName():1927:1927 -> getExportedKeys
    5927:5927:java.sql.ResultSet getExportedKeys(java.lang.String,java.lang.String,java.lang.String):1467 -> getExportedKeys
    1482:1485:java.lang.StringBuilder appendDummyForeignKeyList(java.lang.StringBuilder) -> a
    1493:1556:java.sql.ResultSet getImportedKeys(java.lang.String,java.lang.String,java.lang.String) -> getImportedKeys
    5934:5934:java.lang.String[] org.sqlite.jdbc3.JDBC3DatabaseMetaData$PrimaryKeyFinder.getColumns():1934:1934 -> getImportedKeys
    5934:5934:java.sql.ResultSet getImportedKeys(java.lang.String,java.lang.String,java.lang.String):1523 -> getImportedKeys
    1564:1627:java.sql.ResultSet getIndexInfo(java.lang.String,java.lang.String,java.lang.String,boolean,boolean) -> getIndexInfo
    1636:1643:java.sql.ResultSet getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> getProcedureColumns
    1652:1657:java.sql.ResultSet getProcedures(java.lang.String,java.lang.String,java.lang.String) -> getProcedures
    1665:1669:java.sql.ResultSet getSuperTables(java.lang.String,java.lang.String,java.lang.String) -> getSuperTables
    1677:1682:java.sql.ResultSet getSuperTypes(java.lang.String,java.lang.String,java.lang.String) -> getSuperTypes
    1690:1695:java.sql.ResultSet getTablePrivileges(java.lang.String,java.lang.String,java.lang.String) -> getTablePrivileges
    1703:1727:java.sql.ResultSet getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[]) -> getTables
    1734:1740:java.sql.ResultSet getTableTypes() -> getTableTypes
    1747:1782:java.sql.ResultSet getTypeInfo() -> getTypeInfo
    1790:1797:java.sql.ResultSet getUDTs(java.lang.String,java.lang.String,java.lang.String,int[]) -> getUDTs
    1805:1810:java.sql.ResultSet getVersionColumns(java.lang.String,java.lang.String,java.lang.String) -> getVersionColumns
    1818:1822:java.sql.ResultSet getGeneratedKeys() -> getGeneratedKeys
    1832:1832:java.sql.ResultSet getFunctionColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> getFunctionColumns
    1942:1943:void finalize() -> finalize
    22:22:org.sqlite.SQLiteConnection access$000(org.sqlite.jdbc3.JDBC3DatabaseMetaData) -> a
    22:22:java.lang.String access$100$31cadd25(java.lang.String) -> d
    22:22:java.lang.String access$200$31cadd25(java.lang.String) -> e
    22:22:java.lang.String access$300$31cadd25(java.lang.String) -> f
    1083:1848:void <clinit>() -> <clinit>
org.sqlite.jdbc3.JDBC3DatabaseMetaData$PrimaryKeyFinder -> ax:
    java.lang.String table -> s
    java.lang.String pkName -> t
    java.lang.String[] pkColumns -> e
    1859:1921:void <init>(org.sqlite.jdbc3.JDBC3DatabaseMetaData,java.lang.String) -> <init>
org.sqlite.jdbc3.JDBC3PreparedStatement -> ay:
    30:31:void <init>(org.sqlite.SQLiteConnection,java.lang.String) -> <init>
    37:40:void clearParameters() -> clearParameters
    46:57:boolean execute() -> execute
    65:82:java.sql.ResultSet executeQuery() -> executeQuery
    89:99:int executeUpdate() -> executeUpdate
    106:118:void addBatch() -> addBatch
    126:126:java.sql.ParameterMetaData getParameterMetaData() -> getParameterMetaData
    133:134:int getParameterCount() -> getParameterCount
    141:142:java.lang.String getParameterClassName(int) -> getParameterClassName
    149:149:java.lang.String getParameterTypeName(int) -> getParameterTypeName
    156:156:int getParameterType(int) -> getParameterType
    163:163:int getParameterMode(int) -> getParameterMode
    170:170:int getPrecision(int) -> getPrecision
    177:177:int getScale(int) -> getScale
    184:184:int isNullable(int) -> isNullable
    191:191:boolean isSigned(int) -> isSigned
    205:206:void setBigDecimal(int,java.math.BigDecimal) -> setBigDecimal
    216:245:byte[] readBytes(java.io.InputStream,int) -> a
    253:258:void setBinaryStream(int,java.io.InputStream,int) -> setBinaryStream
    264:265:void setAsciiStream(int,java.io.InputStream,int) -> setAsciiStream
    271:283:void setUnicodeStream(int,java.io.InputStream,int) -> setUnicodeStream
    289:290:void setBoolean(int,boolean) -> setBoolean
    296:297:void setByte(int,byte) -> setByte
    303:304:void setBytes(int,byte[]) -> setBytes
    310:311:void setDouble(int,double) -> setDouble
    317:318:void setFloat(int,float) -> setFloat
    324:325:void setInt(int,int) -> setInt
    331:332:void setLong(int,long) -> setLong
    338:339:void setNull(int,int) -> setNull
    345:346:void setNull(int,int,java.lang.String) -> setNull
    352:394:void setObject(int,java.lang.Object) -> setObject
    400:401:void setObject(int,java.lang.Object,int) -> setObject
    407:408:void setObject(int,java.lang.Object,int,int) -> setObject
    414:415:void setShort(int,short) -> setShort
    421:422:void setString(int,java.lang.String) -> setString
    430:444:void setCharacterStream(int,java.io.Reader,int) -> setCharacterStream
    450:451:void setDate(int,java.sql.Date) -> setDate
    457:458:void setDate(int,java.sql.Date,java.util.Calendar) -> setDate
    465:466:void setTime(int,java.sql.Time) -> setTime
    472:473:void setTime(int,java.sql.Time,java.util.Calendar) -> setTime
    479:480:void setTimestamp(int,java.sql.Timestamp) -> setTimestamp
    486:487:void setTimestamp(int,java.sql.Timestamp,java.util.Calendar) -> setTimestamp
    493:494:java.sql.ResultSetMetaData getMetaData() -> getMetaData
    499:499:java.sql.SQLException unused() -> a
    506:506:void setArray(int,java.sql.Array) -> setArray
    510:510:void setBlob(int,java.sql.Blob) -> setBlob
    512:512:void setClob(int,java.sql.Clob) -> setClob
    514:514:void setRef(int,java.sql.Ref) -> setRef
    516:516:void setURL(int,java.net.URL) -> setURL
    523:523:boolean execute(java.lang.String) -> execute
    531:531:int executeUpdate(java.lang.String) -> executeUpdate
    539:539:java.sql.ResultSet executeQuery(java.lang.String) -> executeQuery
    547:547:void addBatch(java.lang.String) -> addBatch
org.sqlite.jdbc3.JDBC3ResultSet -> az:
    java.util.regex.Pattern COLUMN_TYPENAME -> l
    java.util.regex.Pattern COLUMN_TYPECAST -> m
    java.util.regex.Pattern COLUMN_PRECISION -> n
    30:31:void <init>(org.sqlite.core.CoreStatement) -> <init>
    38:48:int findColumn(java.lang.String) -> findColumn
    1139:1142:java.lang.Integer org.sqlite.core.CoreResultSet.findColumnIndexInCache(java.lang.String):139:142 -> findColumn
    1139:1142:int findColumn(java.lang.String):39 -> findColumn
    1146:1150:int org.sqlite.core.CoreResultSet.addColumnIndexInCache(java.lang.String,int):146:150 -> findColumn
    1146:1150:int findColumn(java.lang.String):45 -> findColumn
    55:84:boolean next() -> next
    1886:1886:void org.sqlite.core.DB.throwex(int):886:886 -> next
    1886:1886:boolean next():83 -> next
    92:92:int getType() -> getType
    99:99:int getFetchSize() -> getFetchSize
    106:110:void setFetchSize(int) -> setFetchSize
    116:117:int getFetchDirection() -> getFetchDirection
    124:128:void setFetchDirection(int) -> setFetchDirection
    134:134:boolean isAfterLast() -> isAfterLast
    141:141:boolean isBeforeFirst() -> isBeforeFirst
    148:148:boolean isFirst() -> isFirst
    155:155:boolean isLast() -> isLast
    163:164:void finalize() -> finalize
    170:170:int getRow() -> getRow
    177:177:boolean wasNull() -> wasNull
    186:195:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    204:204:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    211:211:boolean getBoolean(int) -> getBoolean
    218:218:boolean getBoolean(java.lang.String) -> getBoolean
    225:230:java.io.InputStream getBinaryStream(int) -> getBinaryStream
    238:238:java.io.InputStream getBinaryStream(java.lang.String) -> getBinaryStream
    245:245:byte getByte(int) -> getByte
    252:252:byte getByte(java.lang.String) -> getByte
    259:259:byte[] getBytes(int) -> getBytes
    266:266:byte[] getBytes(java.lang.String) -> getBytes
    273:273:java.io.Reader getCharacterStream(int) -> getCharacterStream
    280:280:java.io.Reader getCharacterStream(java.lang.String) -> getCharacterStream
    287:306:java.sql.Date getDate(int) -> getDate
    2023:2023:java.util.Calendar julianDateToCalendar(java.lang.Double):1023:1023 -> getDate
    2023:2023:java.sql.Date getDate(int):303 -> getDate
    314:338:java.sql.Date getDate(int,java.util.Calendar) -> getDate
    346:346:java.sql.Date getDate(java.lang.String) -> getDate
    353:353:java.sql.Date getDate(java.lang.String,java.util.Calendar) -> getDate
    360:363:double getDouble(int) -> getDouble
    370:370:double getDouble(java.lang.String) -> getDouble
    377:380:float getFloat(int) -> getFloat
    387:387:float getFloat(java.lang.String) -> getFloat
    394:394:int getInt(int) -> getInt
    401:401:int getInt(java.lang.String) -> getInt
    408:408:long getLong(int) -> getLong
    415:415:long getLong(java.lang.String) -> getLong
    422:422:short getShort(int) -> getShort
    429:429:short getShort(java.lang.String) -> getShort
    436:436:java.lang.String getString(int) -> getString
    443:443:java.lang.String getString(java.lang.String) -> getString
    450:469:java.sql.Time getTime(int) -> getTime
    3023:3023:java.util.Calendar julianDateToCalendar(java.lang.Double):1023:1023 -> getTime
    3023:3023:java.sql.Time getTime(int):466 -> getTime
    477:501:java.sql.Time getTime(int,java.util.Calendar) -> getTime
    509:509:java.sql.Time getTime(java.lang.String) -> getTime
    516:516:java.sql.Time getTime(java.lang.String,java.util.Calendar) -> getTime
    523:542:java.sql.Timestamp getTimestamp(int) -> getTimestamp
    4023:4023:java.util.Calendar julianDateToCalendar(java.lang.Double):1023:1023 -> getTimestamp
    4023:4023:java.sql.Timestamp getTimestamp(int):539 -> getTimestamp
    550:577:java.sql.Timestamp getTimestamp(int,java.util.Calendar) -> getTimestamp
    585:585:java.sql.Timestamp getTimestamp(java.lang.String) -> getTimestamp
    592:592:java.sql.Timestamp getTimestamp(java.lang.String,java.util.Calendar) -> getTimestamp
    599:616:java.lang.Object getObject(int) -> getObject
    624:624:java.lang.Object getObject(java.lang.String) -> getObject
    631:631:java.sql.Statement getStatement() -> getStatement
    638:638:java.lang.String getCursorName() -> getCursorName
    645:645:java.sql.SQLWarning getWarnings() -> getWarnings
    651:651:void clearWarnings() -> clearWarnings
    677:677:java.sql.ResultSetMetaData getMetaData() -> getMetaData
    684:684:java.lang.String getCatalogName(int) -> getCatalogName
    691:692:java.lang.String getColumnClassName(int) -> getColumnClassName
    699:700:int getColumnCount() -> getColumnCount
    707:707:int getColumnDisplaySize(int) -> getColumnDisplaySize
    714:714:java.lang.String getColumnLabel(int) -> getColumnLabel
    721:721:java.lang.String getColumnName(int) -> getColumnName
    728:822:int getColumnType(int) -> getColumnType
    831:852:java.lang.String getColumnTypeName(int) -> getColumnTypeName
    860:868:int getPrecision(int) -> getPrecision
    872:879:java.lang.String getColumnDeclType(int) -> a
    885:899:int getScale(int) -> getScale
    906:906:java.lang.String getSchemaName(int) -> getSchemaName
    913:919:java.lang.String getTableName(int) -> getTableName
    926:927:int isNullable(int) -> isNullable
    934:935:boolean isAutoIncrement(int) -> isAutoIncrement
    942:942:boolean isCaseSensitive(int) -> isCaseSensitive
    949:949:boolean isCurrency(int) -> isCurrency
    956:956:boolean isDefinitelyWritable(int) -> isDefinitelyWritable
    963:963:boolean isReadOnly(int) -> isReadOnly
    970:970:boolean isSearchable(int) -> isSearchable
    977:981:boolean isSigned(int) -> isSigned
    988:988:boolean isWritable(int) -> isWritable
    995:995:int getConcurrency() -> getConcurrency
    1002:1002:boolean rowDeleted() -> rowDeleted
    1009:1009:boolean rowInserted() -> rowInserted
    1016:1016:boolean rowUpdated() -> rowUpdated
    1032:1089:java.util.Calendar julianDateToCalendar(java.lang.Double,java.util.Calendar) -> a
    1093:1099:void checkCalendar(java.util.Calendar) -> b
    658:668:void <clinit>() -> <clinit>
org.sqlite.jdbc3.JDBC3Savepoint -> aA:
    int id -> id
    java.lang.String name -> name
    12:15:void <init>(int) -> <init>
    17:20:void <init>(int,java.lang.String) -> <init>
    23:23:int getSavepointId() -> getSavepointId
    27:27:java.lang.String getSavepointName() -> getSavepointName
org.sqlite.jdbc3.JDBC3Statement -> aB:
    21:22:void <init>(org.sqlite.SQLiteConnection) -> <init>
    28:36:void close() -> close
    42:43:void finalize() -> finalize
    49:61:boolean execute(java.lang.String) -> execute
    69:71:java.sql.ResultSet executeQuery$ffd99d9(java.lang.String) -> a
    78:88:java.sql.ResultSet executeQuery(java.lang.String) -> executeQuery
    102:126:int executeUpdate(java.lang.String) -> executeUpdate
    133:151:java.sql.ResultSet getResultSet() -> getResultSet
    1061:1061:boolean org.sqlite.core.CoreResultSet.isOpen():61:61 -> getResultSet
    1061:1061:java.sql.ResultSet getResultSet():135 -> getResultSet
    161:163:int getUpdateCount() -> getUpdateCount
    2061:2061:boolean org.sqlite.core.CoreResultSet.isOpen():61:61 -> getUpdateCount
    2061:2061:int getUpdateCount():161 -> getUpdateCount
    170:178:void addBatch(java.lang.String) -> addBatch
    184:188:void clearBatch() -> clearBatch
    195:222:int[] executeBatch() -> executeBatch
    228:228:void setCursorName(java.lang.String) -> setCursorName
    234:234:java.sql.SQLWarning getWarnings() -> getWarnings
    240:240:void clearWarnings() -> clearWarnings
    246:246:java.sql.Connection getConnection() -> getConnection
    253:254:void cancel() -> cancel
    260:260:int getQueryTimeout() -> getQueryTimeout
    2290:2290:int org.sqlite.core.CoreConnection.getBusyTimeout():290:290 -> getQueryTimeout
    2290:2290:int getQueryTimeout():260 -> getQueryTimeout
    267:270:void setQueryTimeout(int) -> setQueryTimeout
    278:278:int getMaxRows() -> getMaxRows
    286:289:void setMaxRows(int) -> setMaxRows
    295:295:int getMaxFieldSize() -> getMaxFieldSize
    302:304:void setMaxFieldSize(int) -> setMaxFieldSize
    310:310:int getFetchSize() -> getFetchSize
    317:318:void setFetchSize(int) -> setFetchSize
    324:324:int getFetchDirection() -> getFetchDirection
    331:332:void setFetchDirection(int) -> setFetchDirection
    341:346:java.sql.ResultSet getGeneratedKeys() -> getGeneratedKeys
    354:354:boolean getMoreResults() -> getMoreResults
    361:363:boolean getMoreResults(int) -> getMoreResults
    370:370:int getResultSetConcurrency() -> getResultSetConcurrency
    377:377:int getResultSetHoldability() -> getResultSetHoldability
    384:384:int getResultSetType() -> getResultSetType
    391:394:void setEscapeProcessing(boolean) -> setEscapeProcessing
    397:397:java.sql.SQLException unused() -> a
    404:404:boolean execute(java.lang.String,int[]) -> execute
    406:406:boolean execute(java.lang.String,java.lang.String[]) -> execute
    408:408:int executeUpdate(java.lang.String,int) -> executeUpdate
    410:410:int executeUpdate(java.lang.String,int[]) -> executeUpdate
    412:412:int executeUpdate(java.lang.String,java.lang.String[]) -> executeUpdate
    414:414:boolean execute(java.lang.String,int) -> execute
org.sqlite.jdbc4.JDBC4Connection -> aC:
    24:25:void <init>(java.lang.String,java.lang.String,java.util.Properties) -> <init>
    28:34:java.sql.DatabaseMetaData getMetaData() -> getMetaData
    38:41:java.sql.Statement createStatement(int,int,int) -> createStatement
    45:48:java.sql.PreparedStatement prepareStatement(java.lang.String,int,int,int) -> prepareStatement
    56:56:boolean isClosed() -> isClosed
    61:61:java.lang.Object unwrap(java.lang.Class) -> unwrap
    65:65:boolean isWrapperFor(java.lang.Class) -> isWrapperFor
    70:70:java.sql.Clob createClob() -> createClob
    75:75:java.sql.Blob createBlob() -> createBlob
    80:80:java.sql.NClob createNClob() -> createNClob
    85:85:java.sql.SQLXML createSQLXML() -> createSQLXML
    89:96:boolean isValid(int) -> isValid
    104:104:void setClientInfo(java.lang.String,java.lang.String) -> setClientInfo
    110:110:void setClientInfo(java.util.Properties) -> setClientInfo
    114:114:java.lang.String getClientInfo(java.lang.String) -> getClientInfo
    119:119:java.util.Properties getClientInfo() -> getClientInfo
    125:125:java.sql.Array createArrayOf(java.lang.String,java.lang.Object[]) -> createArrayOf
org.sqlite.jdbc4.JDBC4DatabaseMetaData -> aD:
    14:15:void <init>(org.sqlite.SQLiteConnection) -> <init>
    19:19:java.lang.Object unwrap(java.lang.Class) -> unwrap
    23:23:boolean isWrapperFor(java.lang.Class) -> isWrapperFor
    28:28:java.sql.RowIdLifetime getRowIdLifetime() -> getRowIdLifetime
    34:34:java.sql.ResultSet getSchemas(java.lang.String,java.lang.String) -> getSchemas
    39:39:boolean supportsStoredFunctionsUsingCallSyntax() -> supportsStoredFunctionsUsingCallSyntax
    44:44:boolean autoCommitFailureClosesAllResultSets() -> autoCommitFailureClosesAllResultSets
    49:49:java.sql.ResultSet getClientInfoProperties() -> getClientInfoProperties
    55:55:java.sql.ResultSet getFunctions(java.lang.String,java.lang.String,java.lang.String) -> getFunctions
    59:59:java.sql.ResultSet getPseudoColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> getPseudoColumns
    63:63:boolean generatedKeyAlwaysReturned() -> generatedKeyAlwaysReturned
org.sqlite.jdbc4.JDBC4PreparedStatement -> aE:
    19:20:void <init>(org.sqlite.SQLiteConnection,java.lang.String) -> <init>
    25:25:void setRowId(int,java.sql.RowId) -> setRowId
    31:31:void setNString(int,java.lang.String) -> setNString
    37:37:void setNCharacterStream(int,java.io.Reader,long) -> setNCharacterStream
    42:42:void setNClob(int,java.sql.NClob) -> setNClob
    48:48:void setClob(int,java.io.Reader,long) -> setClob
    54:54:void setBlob(int,java.io.InputStream,long) -> setBlob
    60:60:void setNClob(int,java.io.Reader,long) -> setNClob
    66:66:void setSQLXML(int,java.sql.SQLXML) -> setSQLXML
    72:72:void setAsciiStream(int,java.io.InputStream,long) -> setAsciiStream
    78:78:void setBinaryStream(int,java.io.InputStream,long) -> setBinaryStream
    84:84:void setCharacterStream(int,java.io.Reader,long) -> setCharacterStream
    90:90:void setAsciiStream(int,java.io.InputStream) -> setAsciiStream
    96:96:void setBinaryStream(int,java.io.InputStream) -> setBinaryStream
    102:102:void setCharacterStream(int,java.io.Reader) -> setCharacterStream
    108:108:void setNCharacterStream(int,java.io.Reader) -> setNCharacterStream
    113:113:void setClob(int,java.io.Reader) -> setClob
    119:119:void setBlob(int,java.io.InputStream) -> setBlob
    124:124:void setNClob(int,java.io.Reader) -> setNClob
org.sqlite.jdbc4.JDBC4ResultSet -> aF:
    28:29:void <init>(org.sqlite.core.CoreStatement) -> <init>
    33:43:void close() -> close
    1061:1061:boolean org.sqlite.core.CoreResultSet.isOpen():61:61 -> close
    1061:1061:void close():33 -> close
    47:47:java.lang.Object unwrap(java.lang.Class) -> unwrap
    51:51:boolean isWrapperFor(java.lang.Class) -> isWrapperFor
    56:56:java.sql.RowId getRowId(int) -> getRowId
    61:61:java.sql.RowId getRowId(java.lang.String) -> getRowId
    66:66:void updateRowId(int,java.sql.RowId) -> updateRowId
    71:71:void updateRowId(java.lang.String,java.sql.RowId) -> updateRowId
    76:76:int getHoldability() -> getHoldability
    80:80:boolean isClosed() -> isClosed
    2061:2061:boolean org.sqlite.core.CoreResultSet.isOpen():61:61 -> isClosed
    2061:2061:boolean isClosed():80 -> isClosed
    86:86:void updateNString(int,java.lang.String) -> updateNString
    92:92:void updateNString(java.lang.String,java.lang.String) -> updateNString
    97:97:void updateNClob(int,java.sql.NClob) -> updateNClob
    103:103:void updateNClob(java.lang.String,java.sql.NClob) -> updateNClob
    108:108:java.sql.NClob getNClob(int) -> getNClob
    113:113:java.sql.NClob getNClob(java.lang.String) -> getNClob
    118:118:java.sql.SQLXML getSQLXML(int) -> getSQLXML
    123:123:java.sql.SQLXML getSQLXML(java.lang.String) -> getSQLXML
    129:129:void updateSQLXML(int,java.sql.SQLXML) -> updateSQLXML
    135:135:void updateSQLXML(java.lang.String,java.sql.SQLXML) -> updateSQLXML
    140:140:java.lang.String getNString(int) -> getNString
    145:145:java.lang.String getNString(java.lang.String) -> getNString
    150:150:java.io.Reader getNCharacterStream(int) -> getNCharacterStream
    155:155:java.io.Reader getNCharacterStream(java.lang.String) -> getNCharacterStream
    161:161:void updateNCharacterStream(int,java.io.Reader,long) -> updateNCharacterStream
    167:167:void updateNCharacterStream(java.lang.String,java.io.Reader,long) -> updateNCharacterStream
    173:173:void updateAsciiStream(int,java.io.InputStream,long) -> updateAsciiStream
    179:179:void updateBinaryStream(int,java.io.InputStream,long) -> updateBinaryStream
    185:185:void updateCharacterStream(int,java.io.Reader,long) -> updateCharacterStream
    191:191:void updateAsciiStream(java.lang.String,java.io.InputStream,long) -> updateAsciiStream
    197:197:void updateBinaryStream(java.lang.String,java.io.InputStream,long) -> updateBinaryStream
    203:203:void updateCharacterStream(java.lang.String,java.io.Reader,long) -> updateCharacterStream
    209:209:void updateBlob(int,java.io.InputStream,long) -> updateBlob
    215:215:void updateBlob(java.lang.String,java.io.InputStream,long) -> updateBlob
    221:221:void updateClob(int,java.io.Reader,long) -> updateClob
    227:227:void updateClob(java.lang.String,java.io.Reader,long) -> updateClob
    233:233:void updateNClob(int,java.io.Reader,long) -> updateNClob
    239:239:void updateNClob(java.lang.String,java.io.Reader,long) -> updateNClob
    245:245:void updateNCharacterStream(int,java.io.Reader) -> updateNCharacterStream
    251:251:void updateNCharacterStream(java.lang.String,java.io.Reader) -> updateNCharacterStream
    257:257:void updateAsciiStream(int,java.io.InputStream) -> updateAsciiStream
    263:263:void updateBinaryStream(int,java.io.InputStream) -> updateBinaryStream
    269:269:void updateCharacterStream(int,java.io.Reader) -> updateCharacterStream
    275:275:void updateAsciiStream(java.lang.String,java.io.InputStream) -> updateAsciiStream
    281:281:void updateBinaryStream(java.lang.String,java.io.InputStream) -> updateBinaryStream
    287:287:void updateCharacterStream(java.lang.String,java.io.Reader) -> updateCharacterStream
    293:293:void updateBlob(int,java.io.InputStream) -> updateBlob
    299:299:void updateBlob(java.lang.String,java.io.InputStream) -> updateBlob
    304:304:void updateClob(int,java.io.Reader) -> updateClob
    310:310:void updateClob(java.lang.String,java.io.Reader) -> updateClob
    315:315:void updateNClob(int,java.io.Reader) -> updateNClob
    321:321:void updateNClob(java.lang.String,java.io.Reader) -> updateNClob
    325:325:java.lang.Object getObject(int,java.lang.Class) -> getObject
    329:329:java.lang.Object getObject(java.lang.String,java.lang.Class) -> getObject
    333:333:java.sql.SQLException unused() -> a
    340:340:java.sql.Array getArray(int) -> getArray
    342:342:java.sql.Array getArray(java.lang.String) -> getArray
    344:344:java.io.InputStream getAsciiStream(int) -> getAsciiStream
    346:346:java.io.InputStream getAsciiStream(java.lang.String) -> getAsciiStream
    350:350:java.math.BigDecimal getBigDecimal(int,int) -> getBigDecimal
    354:354:java.math.BigDecimal getBigDecimal(java.lang.String,int) -> getBigDecimal
    356:356:java.sql.Blob getBlob(int) -> getBlob
    358:358:java.sql.Blob getBlob(java.lang.String) -> getBlob
    360:360:java.sql.Clob getClob(int) -> getClob
    362:362:java.sql.Clob getClob(java.lang.String) -> getClob
    365:365:java.lang.Object getObject(int,java.util.Map) -> getObject
    368:368:java.lang.Object getObject(java.lang.String,java.util.Map) -> getObject
    370:370:java.sql.Ref getRef(int) -> getRef
    372:372:java.sql.Ref getRef(java.lang.String) -> getRef
    375:375:java.io.InputStream getUnicodeStream(int) -> getUnicodeStream
    377:377:java.io.InputStream getUnicodeStream(java.lang.String) -> getUnicodeStream
    379:379:java.net.URL getURL(int) -> getURL
    381:381:java.net.URL getURL(java.lang.String) -> getURL
    384:384:void insertRow() -> insertRow
    386:386:void moveToCurrentRow() -> moveToCurrentRow
    388:388:void moveToInsertRow() -> moveToInsertRow
    390:390:boolean last() -> last
    392:392:boolean previous() -> previous
    394:394:boolean relative(int) -> relative
    396:396:boolean absolute(int) -> absolute
    398:398:void afterLast() -> afterLast
    400:400:void beforeFirst() -> beforeFirst
    402:402:boolean first() -> first
    405:405:void cancelRowUpdates() -> cancelRowUpdates
    407:407:void deleteRow() -> deleteRow
    410:410:void updateArray(int,java.sql.Array) -> updateArray
    412:412:void updateArray(java.lang.String,java.sql.Array) -> updateArray
    414:414:void updateAsciiStream(int,java.io.InputStream,int) -> updateAsciiStream
    416:416:void updateAsciiStream(java.lang.String,java.io.InputStream,int) -> updateAsciiStream
    418:418:void updateBigDecimal(int,java.math.BigDecimal) -> updateBigDecimal
    420:420:void updateBigDecimal(java.lang.String,java.math.BigDecimal) -> updateBigDecimal
    422:422:void updateBinaryStream(int,java.io.InputStream,int) -> updateBinaryStream
    424:424:void updateBinaryStream(java.lang.String,java.io.InputStream,int) -> updateBinaryStream
    426:426:void updateBlob(int,java.sql.Blob) -> updateBlob
    428:428:void updateBlob(java.lang.String,java.sql.Blob) -> updateBlob
    430:430:void updateBoolean(int,boolean) -> updateBoolean
    432:432:void updateBoolean(java.lang.String,boolean) -> updateBoolean
    434:434:void updateByte(int,byte) -> updateByte
    436:436:void updateByte(java.lang.String,byte) -> updateByte
    438:438:void updateBytes(int,byte[]) -> updateBytes
    440:440:void updateBytes(java.lang.String,byte[]) -> updateBytes
    442:442:void updateCharacterStream(int,java.io.Reader,int) -> updateCharacterStream
    444:444:void updateCharacterStream(java.lang.String,java.io.Reader,int) -> updateCharacterStream
    446:446:void updateClob(int,java.sql.Clob) -> updateClob
    448:448:void updateClob(java.lang.String,java.sql.Clob) -> updateClob
    450:450:void updateDate(int,java.sql.Date) -> updateDate
    452:452:void updateDate(java.lang.String,java.sql.Date) -> updateDate
    454:454:void updateDouble(int,double) -> updateDouble
    456:456:void updateDouble(java.lang.String,double) -> updateDouble
    458:458:void updateFloat(int,float) -> updateFloat
    460:460:void updateFloat(java.lang.String,float) -> updateFloat
    462:462:void updateInt(int,int) -> updateInt
    464:464:void updateInt(java.lang.String,int) -> updateInt
    466:466:void updateLong(int,long) -> updateLong
    468:468:void updateLong(java.lang.String,long) -> updateLong
    470:470:void updateNull(int) -> updateNull
    472:472:void updateNull(java.lang.String) -> updateNull
    474:474:void updateObject(int,java.lang.Object) -> updateObject
    476:476:void updateObject(int,java.lang.Object,int) -> updateObject
    478:478:void updateObject(java.lang.String,java.lang.Object) -> updateObject
    480:480:void updateObject(java.lang.String,java.lang.Object,int) -> updateObject
    482:482:void updateRef(int,java.sql.Ref) -> updateRef
    484:484:void updateRef(java.lang.String,java.sql.Ref) -> updateRef
    486:486:void updateRow() -> updateRow
    488:488:void updateShort(int,short) -> updateShort
    490:490:void updateShort(java.lang.String,short) -> updateShort
    492:492:void updateString(int,java.lang.String) -> updateString
    494:494:void updateString(java.lang.String,java.lang.String) -> updateString
    496:496:void updateTime(int,java.sql.Time) -> updateTime
    498:498:void updateTime(java.lang.String,java.sql.Time) -> updateTime
    500:500:void updateTimestamp(int,java.sql.Timestamp) -> updateTimestamp
    502:502:void updateTimestamp(java.lang.String,java.sql.Timestamp) -> updateTimestamp
    505:505:void refreshRow() -> refreshRow
org.sqlite.jdbc4.JDBC4Statement -> aG:
    boolean closed -> closed
    boolean closeOnCompletion -> i
    11:23:void <init>(org.sqlite.SQLiteConnection) -> <init>
    16:16:java.lang.Object unwrap(java.lang.Class) -> unwrap
    20:20:boolean isWrapperFor(java.lang.Class) -> isWrapperFor
    27:29:void close() -> close
    32:32:boolean isClosed() -> isClosed
    38:40:void closeOnCompletion() -> closeOnCompletion
    43:44:boolean isCloseOnCompletion() -> isCloseOnCompletion
    50:50:void setPoolable(boolean) -> setPoolable
    54:54:boolean isPoolable() -> isPoolable
org.sqlite.util.OSInfo -> org.sqlite.util.OSInfo:
    java.util.HashMap archMapping -> a
    39:39:void <init>() -> <init>
    90:102:void main(java.lang.String[]) -> main
    105:105:java.lang.String getNativeLibFolderPathForCurrentOS() -> e
    109:109:java.lang.String getOSName() -> f
    1215:1229:java.lang.String translateOSNameToFolderName(java.lang.String):215:229 -> f
    1215:1229:java.lang.String getOSName():109 -> f
    118:139:java.lang.String getHardwareName() -> g
    145:198:java.lang.String resolveArmArchType() -> h
    2113:2113:boolean isAndroid():113:113 -> h
    2113:2113:java.lang.String resolveArmArchType():145 -> h
    202:211:java.lang.String getArchName() -> i
    2234:2234:java.lang.String translateArchNameToFolderName(java.lang.String):234:234 -> i
    2234:2234:java.lang.String getArchName():211 -> i
    41:86:void <clinit>() -> <clinit>
